import { useState, useEffect, useRef, useMemo } from "react";
import {
  AlertTriangle,
  Shield,
  MapPin,
  Camera,
  Users,
  Clock,
  Volume2,
  VolumeX,
  Eye,
  Zap,
  Target,
  Bell,
  Activity,
} from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { GeoJSON } from "react-leaflet";
import type { FeatureCollection } from "geojson";
import { MapContainer, TileLayer, Marker, Popup, Circle } from "react-leaflet";
import { Virtuoso } from "react-virtuoso";
import "leaflet/dist/leaflet.css";

const benueBoundaryData: FeatureCollection = {
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "id": 13,
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [9.4673701996575268, 6.4558320002516822, 0],
            [9.4719238001741797, 6.4541689002366711, 0],
            [9.515393300138415, 6.4415801004347042, 0],
            [9.5292382003458158, 6.442677600194731, 0],
            [9.5463529998237178, 6.4507525999150115, 0],
            [9.5679003997607222, 6.4628454000839408, 0],
            [9.5710523003102086, 6.464614300025846, 0],
            [9.5719872004419493, 6.4651389002912945, 0],
            [9.5724288003286748, 6.4653867998758869, 0],
            [9.5726498997068248, 6.465510899613891, 0],
            [9.5861895998265751, 6.473109399934124, 0],
            [9.5871186999657532, 6.473630800104643, 0],
            [9.5866211996227229, 6.4742848001406168, 0],
            [9.5862628002343531, 6.4747559001748431, 0],
            [9.5856656001770677, 6.4755216999136946, 0],
            [9.5852776999821856, 6.4759223997959312, 0],
            [9.5850772001715931, 6.4761915000357986, 0],
            [9.5849868001417473, 6.4763129002155786, 0],
            [9.5847162003869535, 6.476911300441488, 0],
            [9.5845477997658506, 6.4774488997417539, 0],
            [9.5844712004298795, 6.4779003003582387, 0],
            [9.5845273999237968, 6.4788283999162779, 0],
            [9.5846448004307252, 6.4798578999574685, 0],
            [9.5846957998716356, 6.4804412002783334, 0],
            [9.5846141999765937, 6.4819931003330229, 0],
            [9.584598800108699, 6.4826168996948352, 0],
            [9.5846447997017705, 6.4831038000176404, 0],
            [9.5847111002392342, 6.4834588002472024, 0],
            [9.5848745001388291, 6.4839608999841705, 0],
            [9.585185799678726, 6.4849042000426866, 0],
            [9.585308300226302, 6.4853859997907959, 0],
            [9.5853287001873806, 6.4857865997431006, 0],
            [9.5852573001285766, 6.4863038996026967, 0],
            [9.5851806996973234, 6.4867653995792436, 0],
            [9.5850429002650923, 6.4873790997965086, 0],
            [9.5849051000511789, 6.4879521996847984, 0],
            [9.5848131997592603, 6.4885050000778355, 0],
            [9.5846652000660075, 6.4891388999863215, 0],
            [9.5844150999976012, 6.48976779998703, 0],
            [9.584200699688445, 6.4901634002574928, 0],
            [9.5836340999731071, 6.4907111004305733, 0],
            [9.5833125998765407, 6.4911929001944841, 0],
            [9.5830421001963444, 6.4915579997490767, 0],
            [9.5829298000406204, 6.4918876996529802, 0],
            [9.5828175000670797, 6.4923086000564938, 0],
            [9.5828123999384083, 6.4926889997054502, 0],
            [9.5828634002410382, 6.4930237000489797, 0],
            [9.5830472003757183, 6.4934395004407097, 0],
            [9.5831287997624859, 6.4939922996738026, 0],
            [9.5832614997777501, 6.494580599555861, 0],
            [9.5833381000150908, 6.4949457998845217, 0],
            [9.5835729001210819, 6.495747100288944, 0],
            [9.5837413000477305, 6.4962441001613893, 0],
            [9.5839199999922045, 6.4968830999886933, 0],
            [9.5840016000591035, 6.4973952995642481, 0],
            [9.583960799786885, 6.4977705996983293, 0],
            [9.5839302002921283, 6.4980596003963118, 0],
            [9.5839914000705484, 6.498399399594712, 0],
            [9.5840730997826711, 6.498769600211487, 0],
            [9.5843232001409664, 6.4992057998701283, 0],
            [9.5844406002503426, 6.4996063996645583, 0],
            [9.5844887001173742, 6.499891599834041, 0],
            [9.5844887000800636, 6.5004151000070172, 0],
            [9.5845247995870864, 6.5009889002427821, 0],
            [9.5844741998085095, 6.5015841998275414, 0],
            [9.5844380996623659, 6.5020287996341155, 0],
            [9.5844669996576481, 6.5022582999820457, 0],
            [9.5846474998443618, 6.5025881995963415, 0],
            [9.5849073001620244, 6.5029827002414455, 0],
            [9.5849939997246505, 6.503506300111404, 0],
            [9.5851166997877399, 6.5039867997787884, 0],
            [9.5852033002912265, 6.5045389999965897, 0],
            [9.5853693003908216, 6.5051702004131338, 0],
            [9.5854198003891877, 6.505657900149366, 0],
            [9.5852610000996652, 6.5061168997090117, 0],
            [9.5852683001157537, 6.506518499943823, 0],
            [9.5853477004051637, 6.5069201003741206, 0],
            [9.585484799664572, 6.5073575997116944, 0],
            [9.5855642000870933, 6.5077089995499833, 0],
            [9.5857158003633796, 6.5080031002026493, 0],
            [9.5860117998346261, 6.5084406003394202, 0],
            [9.5862644001667991, 6.5088852001374713, 0],
            [9.586524300447822, 6.5093728999224991, 0],
            [9.5872821999534938, 6.5100686002925015, 0],
            [9.5877442000356456, 6.5106351995806673, 0],
            [9.5882639002418344, 6.5111014000905749, 0],
            [9.5888342001832747, 6.5116895001908359, 0],
            [9.5895270999834086, 6.5121413000000548, 0],
            [9.5898627997232264, 6.5123134004215908, 0],
            [9.5902742999702131, 6.512607500199608, 0],
            [9.5905124999596527, 6.513030600189432, 0],
            [9.5907182000891282, 6.5132600997237011, 0],
            [9.5909888999344179, 6.5134035003224033, 0],
            [9.5914075998214745, 6.5138052004339597, 0],
            [9.5916060995586854, 6.5140955999948034, 0],
            [9.5916494001443553, 6.5144219002331489, 0],
            [9.5916710000602556, 6.5146334998819873, 0],
            [9.591833399661887, 6.5149669999860498, 0],
            [9.5922304999324268, 6.5155121001466538, 0],
            [9.5924759000177673, 6.5159602999502173, 0],
            [9.5925445001645109, 6.5160821995752176, 0],
            [9.5925445001185032, 6.5165770996545627, 0],
            [9.592598600178226, 6.5171580002168339, 0],
            [9.5926600002165738, 6.5178106004332177, 0],
            [9.5926058003875632, 6.5182659998987322, 0],
            [9.5926383001717568, 6.5188397995893324, 0],
            [9.5926635996377225, 6.5193633000256925, 0],
            [9.5926274997807504, 6.5197506003266108, 0],
            [9.5925552996581818, 6.5200804996755739, 0],
            [9.5925841996825589, 6.520464200268119, 0],
            [9.592613000302368, 6.5208909000205617, 0],
            [9.5925878000157532, 6.5214036996464015, 0],
            [9.5926636004256061, 6.5219272002142237, 0],
            [9.5927681998610996, 6.5222715004157239, 0],
            [9.5929233996281287, 6.5225869997786141, 0],
            [9.5933384999456148, 6.5232862997642149, 0],
            [9.5937535000928555, 6.5239388998352883, 0],
            [9.5939629002882469, 6.5243476998914778, 0],
            [9.5940494998772934, 6.5247886999763463, 0],
            [9.5940783999044008, 6.5251437003646222, 0],
            [9.5941217002712698, 6.5256600996027458, 0],
            [9.5941902999091386, 6.5260724996132486, 0],
            [9.5943309998057345, 6.5264238995816521, 0],
            [9.5946305996215404, 6.5267825002106186, 0],
            [9.5948146998315025, 6.5270298997937592, 0],
            [9.5949842999882105, 6.5273813000401146, 0],
            [9.5951214001991687, 6.5279550000836473, 0],
            [9.5953235998374158, 6.5284176003778489, 0],
            [9.5955112001521581, 6.5287439001191014, 0],
            [9.5959045998457402, 6.5291167999308879, 0],
            [9.5963197002304348, 6.5293713996896985, 0],
            [9.596785300016041, 6.529572199979313, 0],
            [9.5976515003654477, 6.5295972996967038, 0],
            [9.5985393996250838, 6.5295830001425452, 0],
            [9.5995535999658799, 6.5295076997928279, 0],
            [9.6004631004142098, 6.5294109001184149, 0],
            [9.6015351003352318, 6.529128500201387, 0],
            [9.6053533000103073, 6.5622570003476017, 0],
            [9.6064787001080099, 6.5718207003595879, 0],
            [9.6143856288715526, 6.6179643611712899, 0],
            [9.622298200367581, 6.6641063997056014, 0],
            [9.6292191013966519, 6.6884965429904941, 0],
            [9.6361418003103196, 6.7128858998764711, 0],
            [9.6460295002929648, 6.7385941001247254, 0],
            [9.6473469396158791, 6.7689164885327777, 0],
            [9.648666399854207, 6.7992387000196057, 0],
            [9.6433926001195651, 6.8434037995788417, 0],
            [9.6414146002139915, 6.8664756003840797, 0],
            [9.645699499807753, 6.894820200384066, 0],
            [9.6641568999097665, 6.9356893997628939, 0],
            [9.6766803232257281, 6.9610689660765326, 0],
            [9.6892061000669027, 6.9864468997913622, 0],
            [9.6997528004045837, 7.0114956001234807, 0],
            [9.7188670587226618, 7.0447860004999958, 0],
            [9.7379856002825491, 7.0780730000267207, 0],
            [9.7617159000648126, 7.1011443003684649, 0],
            [9.7772870892061423, 7.1189447662689807, 0],
            [9.7928596500539857, 7.1367435574038396, 0],
            [9.8084335859406213, 7.1545406698360665, 0],
            [9.8240089001976543, 7.172336099628696, 0],
            [9.8345555997374916, 7.1993627998090286, 0],
            [9.8352146002318985, 7.2171607003142881, 0],
            [9.8286227997190689, 7.2362770998678965, 0],
            [9.8249588002968125, 7.2545980995568966, 0],
            [9.8282927999095868, 7.2573709003185858, 0],
            [9.8408175003867608, 7.2797827997525326, 0],
            [9.8496248996844731, 7.3062050003077648, 0],
            [9.8546631000359319, 7.321318900044802, 0],
            [9.8559789999446661, 7.3252663998384868, 0],
            [9.865207700263813, 7.3628402000951931, 0],
            [9.8726645814740941, 7.38479160684156, 0],
            [9.880123100142244, 7.4067421997157714, 0],
            [9.8809453001395617, 7.4091620000587888, 0],
            [9.8826761003019197, 7.4142561001870968, 0],
            [9.8829280000825808, 7.4162717998148633, 0],
            [9.8830579002529788, 7.4173110000303657, 0],
            [9.8833833997395804, 7.4199156001249085, 0],
            [9.8839234999173975, 7.4242368999646926, 0],
            [9.8840204001089944, 7.4250125998620344, 0],
            [9.8844651002590904, 7.4285706996240188, 0],
            [9.8844967996743698, 7.4288244003474011, 0],
            [9.8852753997324072, 7.4350539997202185, 0],
            [9.885947799597508, 7.4404339004400066, 0],
            [9.8886079997147736, 7.4617175998137055, 0],
            [9.8846530997413069, 7.5078602002168466, 0],
            [9.8708105002712685, 7.5401601998119352, 0],
            [9.8594249003611001, 7.5558087997188466, 0],
            [9.8593410999641975, 7.555923100406063, 0],
            [9.8510165004124026, 7.5672723003632782, 0],
            [9.8498014001810628, 7.5689289001189488, 0],
            [9.845927899966151, 7.5742096002232602, 0],
            [9.8457613000286734, 7.5744376002527849, 0],
            [9.8399887003780808, 7.5792742001719144, 0],
            [9.8335257002664651, 7.584689399812051, 0],
            [9.8308726002941142, 7.5869122999220826, 0],
            [9.8272867003373907, 7.5899167995513448, 0],
            [9.8221675996091768, 7.5942059004520015, 0],
            [9.8213719999050504, 7.5948724999827135, 0],
            [9.8175327003271651, 7.5971543002136483, 0],
            [9.8163661997162386, 7.5978475002212056, 0],
            [9.808517500013167, 7.6060786003572041, 0],
            [9.797699900189496, 7.6146859999098462, 0],
            [9.7472133996207404, 7.6548580995834303, 0],
            [9.7017298003293728, 7.710229400360082, 0],
            [9.6833668002504165, 7.7402103997087499, 0],
            [9.6694297999314038, 7.7629637998677028, 0],
            [9.6430625998155559, 7.79987810008432, 0],
            [9.6015348000090999, 7.829541199785524, 0],
            [9.561324099736062, 7.8387699003656337, 0],
            [9.5303436412154845, 7.8407483837730876, 0],
            [9.4993609999081698, 7.8427248000133618, 0],
            [9.471183297726343, 7.8432220587898582, 0],
            [9.4430039757790762, 7.8437174621120977, 0],
            [9.4148230409554383, 7.8442110094154902, 0],
            [9.3866405001465427, 7.8447027001375949, 0],
            [9.3797850000013714, 7.8436447000343232, 0],
            [9.3797199002913452, 7.8436390002193077, 0],
            [9.3780718000363077, 7.8433843002324668, 0],
            [9.3610570998225224, 7.8411227001786479, 0],
            [9.3147897996124183, 7.8348149999712389, 0],
            [9.2726021002177887, 7.8229494000934672, 0],
            [9.2251629995888411, 7.8180533995737322, 0],
            [9.1902045996934341, 7.810424800096107, 0],
            [9.1565856995984127, 7.797900700034563, 0],
            [9.1302184999412486, 7.7880130003827857, 0],
            [9.120330799834802, 7.7932862998286163, 0],
            [9.1157169000649549, 7.8084473998497312, 0],
            [9.1242857003725852, 7.8269047997748471, 0],
            [9.1401061996977244, 7.848657599754004, 0],
            [9.1499939003936994, 7.8598638000245744, 0],
            [9.1625185001583933, 7.8690925001411101, 0],
            [9.1704292002254615, 7.882276099689709, 0],
            [9.1721706001111727, 7.8866309997932431, 0],
            [9.1746235002024115, 7.8871759999565629, 0],
            [9.1782311999930855, 7.8885288002264726, 0],
            [9.1818380004111901, 7.8916850003317336, 0],
            [9.1831912998331262, 7.8957429002082735, 0],
            [9.1809367995487481, 7.9038590996426006, 0],
            [9.1791257997982925, 7.9080834001772722, 0],
            [9.1755256997211667, 7.9164844003448529, 0],
            [9.1638020998812983, 7.9367751996440008, 0],
            [9.1457662995732782, 7.9701418999844451, 0],
            [9.1326904003713771, 7.9913339998979902, 0],
            [9.1146545001875516, 8.0080174999315581, 0],
            [9.0984221001857613, 8.0278567998542076, 0],
            [9.0934285996423299, 8.0340614002221944, 0],
            [9.0835418999425794, 8.046343799856734, 0],
            [9.0676755999389851, 8.0675201000064138, 0],
            [9.062466600200457, 8.0744733996668394, 0],
            [9.0570201998647644, 8.0776414998854147, 0],
            [9.0501757002819296, 8.0752019999822622, 0],
            [9.0253753995985946, 8.0625763002334132, 0],
            [8.9983220397750756, 8.0600972739143391, 0],
            [8.9712676999220022, 8.0576161998236113, 0],
            [8.9410579668039691, 8.0569412113191667, 0],
            [8.9108467002803113, 8.0562639003422429, 0],
            [8.8763542917443417, 8.0616757364558893, 0],
            [8.8418589002002257, 8.0670853002140088, 0],
            [8.8197651003865065, 8.0702418995926521, 0],
            [8.7805366998971728, 8.0752019996293232, 0],
            [8.7386051791277222, 8.0857996549276301, 0],
            [8.6966686000023117, 8.096394499667495, 0],
            [8.6669106080487399, 8.1063147435282925, 0],
            [8.6371497999183546, 8.1162338001798577, 0],
            [8.5880013003324081, 8.128858599919047, 0],
            [8.560496300092856, 8.1401319995933328, 0],
            [8.5244246000635879, 8.1572657003221263, 0],
            [8.5126800997414573, 8.1577768000164532, 0],
            [8.5036830999187316, 8.1581678004287372, 0],
            [8.4860982999442136, 8.1491499001734944, 0],
            [8.4662580002440642, 8.1392298001720533, 0],
            [8.446417751727024, 8.1257037813155453, 0],
            [8.4265785004222522, 8.1121759001677436, 0],
            [8.4085418554382692, 8.0950426598407361, 0],
            [8.3905066999288671, 8.0779076002317023, 0],
            [8.3711176003701375, 8.0463438003239798, 0],
            [8.3634528996380624, 8.0165844003160114, 0],
            [8.3602961997020273, 7.9872761000994137, 0],
            [8.3602962003465819, 7.9606729002809358, 0],
            [8.3634528999682054, 7.9462437997043924, 0],
            [8.3787831997786366, 7.9155827003106651, 0],
            [8.3977213004307405, 7.8799614996155949, 0],
            [8.4053868997183692, 7.8610234000660943, 0],
            [8.4046620996838932, 7.8367605001047433, 0],
            [8.396642699572169, 7.8294481996082617, 0],
            [8.3929204999543696, 7.8201446999374378, 0],
            [8.3938512997815948, 7.8099102997313441, 0],
            [8.4012946998124001, 7.7959547003527279, 0],
            [8.4068766003142024, 7.7871161002658615, 0],
            [8.4119939999187281, 7.7764168002563743, 0],
            [8.4119939998394653, 7.7685088999162089, 0],
            [8.4031552999578771, 7.7661828998523426, 0],
            [8.38547800012166, 7.7680435001949544, 0],
            [8.3721589996568007, 7.7700023998837979, 0],
            [8.3622189002771972, 7.774556199790343, 0],
            [8.3454722999719646, 7.7843250999854501, 0],
            [8.3287249001778925, 7.7917680997113186, 0],
            [8.3017445003394492, 7.8024672998859126, 0],
            [8.2747630998135175, 7.8145623003505786, 0],
            [8.2515039000736525, 7.8224702003925941, 0],
            [8.2152194999686543, 7.8345651996708607, 0],
            [8.1910294997876392, 7.8489861003367292, 0],
            [8.1854477001366188, 7.8522424996387841, 0],
            [8.1831216998214913, 7.8531728003872896, 0],
            [8.1803578995850668, 7.8525804999699051, 0],
            [8.1756783001419127, 7.8550334001625615, 0],
            [8.1598625001220899, 7.8596854004308332, 0],
            [8.1393937995780679, 7.8615460002480555, 0],
            [8.113808599629122, 7.8638720995730269, 0],
            [8.0952014995943564, 7.8689890004115011, 0],
            [8.0724068004199605, 7.8773622998314874, 0],
            [8.0688562002211839, 7.8795036999273487, 0],
            [8.0407743002984908, 7.8964353003680223, 0],
            [7.9947208999360608, 7.9229506997063828, 0],
            [7.9728569998746508, 7.9392323000426552, 0],
            [7.9319210004362182, 7.9573745998565002, 0],
            [7.9030789995705018, 7.9690041998698646, 0],
            [7.8770289002562937, 7.9834250999563121, 0],
            [7.8672600002862714, 7.9862161000534213, 0],
            [7.8384180003902744, 7.9852858003859817, 0],
            [7.8109722000316104, 7.9913330001819904, 0],
            [7.7825955999212839, 7.9987763995777836, 0],
            [7.7607321998935461, 8.0034285001409664, 0],
            [7.7384027996853746, 8.0062188997343657, 0],
            [7.6974669000123184, 8.0136623001439791, 0],
            [7.6768379000728837, 8.0144711003321056, 0],
            [7.6711111000877867, 7.9826578997412252, 0],
            [7.6643176003738835, 7.9351019997138108, 0],
            [7.6636380999636291, 7.9058889997351027, 0],
            [7.6697525996095477, 7.8848285997571042, 0],
            [7.6928510999999355, 7.8386312002966774, 0],
            [7.7281784999166643, 7.7924341998547941, 0],
            [7.7446904003783885, 7.7686567000197826, 0],
            [7.7526355001390561, 7.7441987998656741, 0],
            [7.7526355001154181, 7.7081922997438097, 0],
            [7.7539945001438433, 7.6796588999954745, 0],
            [7.7546739997701888, 7.6613158998068078, 0],
            [7.7546739996927485, 7.6477284001646071, 0],
            [7.7524480996864868, 7.6477828002514547, 0],
            [7.752448099577756, 7.6233621002317333, 0],
            [7.7507806003159212, 7.5941792003307649, 0],
            [7.7528647997389317, 7.5641626996539237, 0],
            [7.7549495998331981, 7.5445685002405449, 0],
            [7.7557831003174833, 7.5303940997134173, 0],
            [7.7545323001841426, 7.5128841002731086, 0],
            [7.7553663001459769, 7.5049628997038278, 0],
            [7.7587012997802756, 7.4924560004238163, 0],
            [7.7595353000693885, 7.4786982996657505, 0],
            [7.7607861000340215, 7.4516001004304453, 0],
            [7.7641211003244095, 7.4336734000549107, 0],
            [7.7682900002401052, 7.4270029002454336, 0],
            [7.7762113002531956, 7.4194988998165634, 0],
            [7.7928872002159606, 7.414913199657839, 0],
            [7.7991404999642597, 7.4161639002679385, 0],
            [7.81206459969661, 7.4149132000705302, 0],
            [7.8349937997289905, 7.4186649002737228, 0],
            [7.8487514998725549, 7.4203328996064322, 0],
            [7.8604506997484274, 7.4133705998487898, 0],
            [7.8662610001937461, 7.4040737001959283, 0],
            [7.8654274998278479, 7.3928174996048801, 0],
            [7.8617724999625231, 7.3844633003782629, 0],
            [7.8547963996873591, 7.3728060996210676, 0],
            [7.8485431998493933, 7.3602990998853732, 0],
            [7.8385377002607326, 7.3352852001639546, 0],
            [7.8264475002680518, 7.3090210002340283, 0],
            [7.818734600158626, 7.2869252999292771, 0],
            [7.806644900221217, 7.2544069002241223, 0],
            [7.7970561999524222, 7.233145200071962, 0],
            [7.7938651998483106, 7.2258252996837014, 0],
            [7.789969000446324, 7.2168860003469444, 0],
            [7.7828817000745065, 7.2052131002084367, 0],
            [7.777878800223136, 7.1981257999035853, 0],
            [7.7720423000137293, 7.1939568999173753, 0],
            [7.739941099689168, 7.1789483998886627, 0],
            [7.7299355996886296, 7.1722779003782966, 0],
            [7.7232652003189699, 7.1672754000477141, 0],
            [7.7082567001454212, 7.1651907000686519, 0],
            [7.7037467996474369, 7.1648903000720958, 0],
            [7.6957497995591329, 7.164357200114515, 0],
            [7.676989599909664, 7.1551851998490106, 0],
            [7.6569781003839141, 7.1464305001440716, 0],
            [7.6461387000374383, 7.1376757996706388, 0],
            [7.6373839003462463, 7.1326728004419868, 0],
            [7.6298799999252491, 7.124751600027694, 0],
            [7.6219586997846918, 7.1126617997065145, 0],
            [7.6186237001311401, 7.1080755997098839, 0],
            [7.6111193003478324, 7.1001548995789072, 0],
            [7.6019477997571023, 7.0905662001825398, 0],
            [7.5994462999484798, 7.0793099002289548, 0],
            [7.6006970001569218, 7.0730562000367811, 0],
            [7.6023645001389344, 7.0622168003339274, 0],
            [7.6036152998516791, 7.0530452999277626, 0],
            [7.6069503003894701, 7.0413717996682532, 0],
            [7.6098684997818449, 7.032200300204754, 0],
            [7.6111192997314827, 7.0271973995845203, 0],
            [7.6102858004045162, 7.0234450995886473, 0],
            [7.6077843003491683, 7.0176086002654063, 0],
            [7.6011138003033105, 7.0163579003298144, 0],
            [7.5931925999027996, 7.0180259002120833, 0],
            [7.5806855998854852, 7.027197400023157, 0],
            [7.543582000379887, 7.0401211000328852, 0],
            [7.5368099001919351, 7.0359598997378061, 0],
            [7.5305137998624856, 7.032278099743392, 0],
            [7.5382714001334472, 7.020157800196805, 0],
            [7.5422100996965389, 7.0083418002025288, 0],
            [7.5453610003890965, 7.0012516999866996, 0],
            [7.549300199812742, 6.9910110999139112, 0],
            [7.5524510997350234, 6.9847088004229425, 0],
            [7.5571774999648538, 6.9776191998514294, 0],
            [7.5588794002051678, 6.9715681002579339, 0],
            [7.5642671997498541, 6.9524111996929099, 0],
            [7.5713573000116154, 6.9398069002625853, 0],
            [7.5776591001266063, 6.9327172999967273, 0],
            [7.5823644003762052, 6.9310368001297311, 0],
            [7.5875869996200072, 6.9291795002269181, 0],
            [7.5997161997347096, 6.9248394995906386, 0],
            [7.6201978003149877, 6.9193253997714876, 0],
            [7.6359529999165279, 6.9035701996656966, 0],
            [7.6461940003373128, 6.8854518001071803, 0],
            [7.6580099996146602, 6.8681210997730568, 0],
            [7.6745528998398518, 6.8555174001839072, 0],
            [7.6922798001368697, 6.8518243000176939, 0],
            [7.7202425004452984, 6.8626069995518195, 0],
            [7.7344221995957758, 6.8633946996143518, 0],
            [7.7501774001134498, 6.8783621997431252, 0],
            [7.7627816004221817, 6.8799376000112886, 0],
            [7.7760344004385802, 6.8758248996413585, 0],
            [7.7856264004325482, 6.8728480000415351, 0],
            [7.8005938998706483, 6.8728479999596619, 0],
            [7.817924000193833, 6.8783622000291169, 0],
            [7.8344669001119147, 6.8807253995965372, 0],
            [7.8549485002412096, 6.8807253999339304, 0],
            [7.8636141003161804, 6.8799376001878931, 0],
            [7.8746424002378363, 6.8689089003236417, 0],
            [7.8762177998617044, 6.8633947000561868, 0],
            [7.8825970002100041, 6.8582916003444909, 0],
            [7.8880342996612738, 6.8539418999327912, 0],
            [7.8903975001778939, 6.8437009003091722, 0],
            [7.8888220996916436, 6.8216438001553952, 0],
            [7.8864588998148157, 6.8051008998790614, 0],
            [7.8864589000621521, 6.7940725997565474, 0],
            [7.8876405003307219, 6.7893457003849482, 0],
            [7.890003699577246, 6.785407100226533, 0],
            [7.900244699595997, 6.786194800171927, 0],
            [7.9033956996263894, 6.7814684001136554, 0],
            [7.8947301001313388, 6.7743788001776082, 0],
            [7.888428199966226, 6.766500900421768, 0],
            [7.8781876997681417, 6.7601990996166972, 0],
            [7.8671588997585511, 6.7515334999603978, 0],
            [7.8553423998923311, 6.7428684002311723, 0],
            [7.8451018002808102, 6.7215990998947772, 0],
            [7.8411631998991549, 6.714508999959361, 0],
            [7.8301344000011284, 6.6893010001835291, 0],
            [7.8214693002772622, 6.6743335997861637, 0],
            [7.8151669996168174, 6.6593665999329286, 0],
            [7.810440500091886, 6.6499133001007635, 0],
            [7.8049263997542244, 6.6404604997188263, 0],
            [7.8071407999638902, 6.6338172004503138, 0],
            [7.8217769003430542, 6.638922699961018, 0],
            [7.8317666003763717, 6.6384686997199367, 0],
            [7.8335828998010211, 6.626208299769722, 0],
            [7.8335829000221047, 6.619396700057731, 0],
            [7.836761999798334, 6.6148558000439168, 0],
            [7.8440270004456085, 6.6084985995572385, 0],
            [7.8467517000010405, 6.6044115996101507, 0],
            [7.852654900100152, 6.5880646997564352, 0],
            [7.8558335004041551, 6.5807990999323298, 0],
            [7.8690022999988303, 6.5689925995687117, 0],
            [7.8780841996587947, 6.5617269996799177, 0],
            [7.8871660001145427, 6.5526452003958164, 0],
            [7.9003347997739235, 6.5476503001626565, 0],
            [7.9094166997693893, 6.5426549998225587, 0],
            [7.9221310995543774, 6.5362977997126661, 0],
            [7.9294167002797966, 6.5329862002255803, 0],
            [7.9321213003299622, 6.5317568999928488, 0],
            [7.9493766000355324, 6.5322108003319901, 0],
            [7.9566422002574555, 6.5403848001190958, 0],
            [7.9625454002916047, 6.5440173003136834, 0],
            [7.9666324000872084, 6.5576400995597126, 0],
            [7.9707192998159826, 6.5685387001551936, 0],
            [7.9766221003589983, 6.5830692997537357, 0],
            [7.9829798000524024, 6.6012329996481052, 0],
            [7.9870663000345683, 6.6112232001084372, 0],
            [7.9884286001470608, 6.6180347998474609, 0],
            [7.987066299716397, 6.6334739004391574, 0],
            [7.98752069975819, 6.64891290012672, 0],
            [7.9870662996555275, 6.6611733001882794, 0],
            [7.9857038997648448, 6.6693473000269163, 0],
            [7.9884286004134637, 6.6879648996104279, 0],
            [7.9947863000052086, 6.7038583995700423, 0],
            [8.0002355998709636, 6.71203179958089, 0],
            [8.0084085003505407, 6.7143020996433878, 0],
            [8.0252103996636297, 6.7143020998633371, 0],
            [8.0354271002273716, 6.7124858001780012, 0],
            [8.0508660996496637, 6.7093072003717316, 0],
            [8.0653972997989687, 6.7115778998411573, 0],
            [8.0753880003782168, 6.7138481000748538, 0],
            [8.0795659997685743, 6.7131519002687448, 0],
            [8.0890102002467756, 6.7115779004377414, 0],
            [8.0953674003323837, 6.7079449000208893, 0],
            [8.0985460000086942, 6.7070370003557045, 0],
            [8.1039953001656091, 6.7120318001151551, 0],
            [8.112169300371562, 6.7093071996054841, 0],
            [8.1276083000169557, 6.71157789972938, 0],
            [8.1362362000956345, 6.7161187997910652, 0],
            [8.1444092000404726, 6.7252007003609062, 0],
            [8.1453179999464496, 6.7347363995540466, 0],
            [8.1471338001552276, 6.7429099002062829, 0],
            [8.149063100110137, 6.7470889004290377, 0],
            [8.1525831004518672, 6.7547164001183981, 0],
            [8.160303100402297, 6.7610740998601999, 0],
            [8.1652974998827332, 6.7665229002605498, 0],
            [8.1685040004343783, 6.7693441001580217, 0],
            [8.1685895002212572, 6.7694196003992548, 0],
            [8.1730175001562522, 6.7733345001685379, 0],
            [8.1839161001335921, 6.7756047004044433, 0],
            [8.1916350997862306, 6.7783293996671397, 0],
            [8.199355099559229, 6.7783294001080048, 0],
            [8.2129773996375235, 6.7760586998486918, 0],
            [8.2202434998279372, 6.7787832998309048, 0],
            [8.226146700036729, 6.789681899699163, 0],
            [8.2309049997123402, 6.7916356001016158, 0],
            [8.2318453000032168, 6.790762900348895, 0],
            [8.2327894002722353, 6.7904220001426348, 0],
            [8.2341068998946003, 6.7908609996684977, 0],
            [8.2349351995589295, 6.7914448004018348, 0],
            [8.2356218000923018, 6.7922971002742534, 0],
            [8.236252699746899, 6.7935883000813471, 0],
            [8.2371968001330078, 6.7943553001431578, 0],
            [8.2382826000602627, 6.7945130001943905, 0],
            [8.2388834000508648, 6.7937458996786386, 0],
            [8.2392266997299934, 6.7928083997970257, 0],
            [8.2389993004394775, 6.7912019003642872, 0],
            [8.2383684000282411, 6.7892287998023004, 0],
            [8.2380251001332745, 6.788035600075248, 0],
            [8.2380550999116853, 6.7865995001743782, 0],
            [8.2387116997528338, 6.784796900411127, 0],
            [8.2396558997659177, 6.7834331999249216, 0],
            [8.2416353004481664, 6.7813663998205751, 0],
            [8.2444066004072702, 6.778417399690543, 0],
            [8.2453207000735045, 6.777211399764508, 0],
            [8.2459214997780883, 6.7761034004037324, 0],
            [8.2466382003192287, 6.7745820000486736, 0],
            [8.2473805996479772, 6.7732907996523339, 0],
            [8.247552300307083, 6.7723532002314704, 0],
            [8.2470672997686698, 6.7714285003578105, 0],
            [8.2458657003870783, 6.7705760998434927, 0],
            [8.2448357002173616, 6.770064699841762, 0],
            [8.2443766003183327, 6.7692849002681204, 0],
            [8.2443765995718881, 6.7683472995777851, 0],
            [8.2447091996762971, 6.7677829996020815, 0],
            [8.2449215998728427, 6.767422500097676, 0],
            [8.24592150040381, 6.7668984001864692, 0],
            [8.2480672996907476, 6.7662164995982437, 0],
            [8.2498696999134111, 6.7653642002794712, 0],
            [8.2527021001989684, 6.7630629003986273, 0],
            [8.2547620995863404, 6.7613582003740653, 0],
            [8.2551686001310109, 6.7608468996168529, 0],
            [8.2560495002282241, 6.7597387999733325, 0],
            [8.2571652997374425, 6.7568408002835776, 0],
            [8.25793780026234, 6.7542837003773775, 0],
            [8.2581952998468644, 6.7517266999178931, 0],
            [8.2581953001071415, 6.7472091998202766, 0],
            [8.2583970003402349, 6.7456877000696789, 0],
            [8.2589677996409758, 6.7443110999171028, 0],
            [8.261456900088529, 6.7420097004128481, 0],
            [8.2626027001911311, 6.7409997003683744, 0],
            [8.263001800370251, 6.7399640995652481, 0],
            [8.2627743998731482, 6.738954000274366, 0],
            [8.2618859998891381, 6.7382592997446888, 0],
            [8.2609719004272257, 6.7381015996003297, 0],
            [8.2599419998453545, 6.7382721004233277, 0],
            [8.2591394000773839, 6.7386855003631778, 0],
            [8.2580249002586825, 6.7392799003665758, 0],
            [8.2568220002654993, 6.7395379001758275, 0],
            [8.2556203999047568, 6.739452599658855, 0],
            [8.2542770996463979, 6.7392097004379661, 0],
            [8.2528737996760064, 6.7385150000471619, 0],
            [8.2516721996926119, 6.7381740996195632, 0],
            [8.2508138999269462, 6.7380036003340509, 0],
            [8.249869700334747, 6.7381740996635111, 0],
            [8.2489556002980855, 6.7381867999305634, 0],
            [8.2482389004057666, 6.7377479003630816, 0],
            [8.2478955997980457, 6.7368955000534507, 0],
            [8.2479813999204357, 6.7356168998890249, 0],
            [8.2481019000174189, 6.7354156999835757, 0],
            [8.2495564004058295, 6.7329872997704028, 0],
            [8.2505563996134619, 6.731866399721719, 0],
            [8.2515004997226118, 6.731440200374629, 0],
            [8.2535603998758553, 6.7312697001401576, 0],
            [8.2557361995561873, 6.7306858996544143, 0],
            [8.2577104002992261, 6.7297482003216444, 0],
            [8.2599420004125204, 6.7286401002497671, 0],
            [8.2625169002404544, 6.7273615002608684, 0],
            [8.2646325997917049, 6.7261553999199037, 0],
            [8.2663491995960854, 6.7244506002585362, 0],
            [8.2676367001848821, 6.723086699629981, 0],
            [8.2684949999550206, 6.7215524000528717, 0],
            [8.2689241001658935, 6.7202738003786093, 0],
            [8.2689241004443019, 6.7183132003311616, 0],
            [8.2682375002470554, 6.7163527002990673, 0],
            [8.2675507999004001, 6.7136249002023964, 0],
            [8.267379199898917, 6.7123462997524426, 0],
            [8.26789419957354, 6.7108119002852868, 0],
            [8.2687825000523674, 6.7098871003524891, 0],
            [8.2698125002840719, 6.7094607998534261, 0],
            [8.2708982003357345, 6.7097889997411047, 0],
            [8.2714991001942817, 6.7104710000766383, 0],
            [8.2717866000980429, 6.7120180998288106, 0],
            [8.272185700409187, 6.7134545002084645, 0],
            [8.2730440002805139, 6.7138807002563192, 0],
            [8.2743615003714588, 6.7140639000761295, 0],
            [8.2754773002836579, 6.7141492002222884, 0],
            [8.276906399999767, 6.7136249003369093, 0],
            [8.2779663996524562, 6.7129558000578156, 0],
            [8.2788246998991575, 6.7112508996084923, 0],
            [8.279223799639805, 6.7091071003018303, 0],
            [8.2788246995973402, 6.7070740000606941, 0],
            [8.2773354995725192, 6.7049302004530311, 0],
            [8.2757906000919448, 6.7031399998448817, 0],
            [8.2743614995918566, 6.7017888996629384, 0],
            [8.2736448001993868, 6.7004975000482201, 0],
            [8.2733873000757807, 6.6988777999983649, 0],
            [8.2738464997017402, 6.6975266995815703, 0],
            [8.2745331996436278, 6.6965890001747095, 0],
            [8.2758205996989265, 6.6959922999510724, 0],
            [8.2774214002396782, 6.6950417997727278, 0],
            [8.2786229998056058, 6.6937631001675628, 0],
            [8.2798245998723576, 6.6912909998004331, 0],
            [8.2815412000494177, 6.6884778998728445, 0],
            [8.2837170997334297, 6.6857627996967279, 0],
            [8.2858328003419253, 6.6837892996739372, 0],
            [8.287892699719368, 6.6824252995702595, 0],
            [8.2908109996212183, 6.6799531002141794, 0],
            [8.2925276002076309, 6.6779923999949089, 0],
            [8.2993983999362069, 6.6799102000696218, 0],
            [8.3039532001789524, 6.6787299999493008, 0],
            [8.3073673003885524, 6.6775578999646115, 0],
            [8.3130712996802529, 6.6775188004304944, 0],
            [8.3176431996450599, 6.6786360997058916, 0],
            [8.3210659002710798, 6.6786132004112586, 0],
            [8.3256377998100728, 6.679729000425052, 0],
            [8.3302096998274422, 6.6808462002664282, 0],
            [8.3359308001406038, 6.6831030999729446, 0],
            [8.3405027004197141, 6.684218900353236, 0],
            [8.3450831999347272, 6.6864839002130836, 0],
            [8.3485146000171575, 6.6876077997868979, 0],
            [8.3542355995596775, 6.6898651002228338, 0],
            [8.3576756003222918, 6.6921382001048464, 0],
            [8.3611059001328698, 6.6932621000747732, 0],
            [8.3668442002499468, 6.697814899975385, 0],
            [8.370292699751527, 6.7012348001734328, 0],
            [8.3725995996664846, 6.7046642001176613, 0],
            [8.3748979997172768, 6.7069439999897336, 0],
            [8.3772143999681035, 6.7115210996376984, 0],
            [8.3795299996044808, 6.7160968999743949, 0],
            [8.3818282995492766, 6.718378099766376, 0],
            [8.3830031997417258, 6.7229619002566876, 0],
            [8.3864688999509429, 6.7286792004024685, 0],
            [8.3876351997327987, 6.7321147997964381, 0],
            [8.3910998996857806, 6.7378320997895438, 0],
            [8.3934163996099365, 6.7424077997036784, 0],
            [8.3980045003790664, 6.7458209995588803, 0],
            [8.4025936001163188, 6.7492328004293833, 0],
            [8.4083233004291191, 6.7526379000736769, 0],
            [8.4106139996663405, 6.7537708004174375, 0],
            [8.4151850002159634, 6.7548871003659574, 0],
            [8.4197655002687277, 6.7571520996838208, 0],
            [8.4243288001060446, 6.7571211000546674, 0],
            [8.4277601001997287, 6.7582449999982215, 0],
            [8.4323235002560821, 6.7582139999698567, 0],
            [8.4357462001656369, 6.7581902001212812, 0],
            [8.4403008995898254, 6.7570099996020874, 0],
            [8.4437075000310617, 6.7546911002507395, 0],
            [8.4482441002148807, 6.7512149995599833, 0],
            [8.4504995003621239, 6.7477550995917355, 0],
            [8.4539231995569555, 6.7477322001085689, 0],
            [8.4584779996024935, 6.7465520001613202, 0],
            [8.4607592002539853, 6.746537200121197, 0],
            [8.4641819001372163, 6.7465129002664161, 0],
            [8.4687451999974943, 6.7464809002984323, 0],
            [8.4721766001256942, 6.7476057999381478, 0],
            [8.4767484999333949, 6.748723000436442, 0],
            [8.4801874002955309, 6.7509960996531593, 0],
            [8.4881906996702927, 6.7532358000107031, 0],
            [8.4961852998822618, 6.7543291999382067, 0],
            [8.5030555995857018, 6.7577270995867256, 0],
            [8.5087681000104816, 6.7588347997859746, 0],
            [8.5156221000232595, 6.7599359004349768, 0],
            [8.5236082003763904, 6.7598809995933609, 0],
            [8.5304527001976158, 6.7598338002258442, 0],
            [8.5350160999927169, 6.7598027996418528, 0],
            [8.5441341003284919, 6.7585920996218869, 0],
            [8.5509882002076072, 6.7596930995505149, 0],
            [8.5578498997612282, 6.7619410004357539, 0],
            [8.5635623998190162, 6.7630500998300365, 0],
            [8.5704164999726373, 6.7641511002875339, 0],
            [8.5784111002591033, 6.7652439997768106, 0],
            [8.5875626000445653, 6.7686247998725877, 0],
            [8.5944252001585237, 6.7708750004205935, 0],
            [8.6012955001716644, 6.7742710001838224, 0],
            [8.6070080001870579, 6.7753800999789648, 0],
            [8.6127300002620562, 6.7776370001085295, 0],
            [8.6161604003817587, 6.778760899831318, 0],
            [8.6207408995726862, 6.781025900327653, 0],
            [8.6230402002142306, 6.7833071000309761, 0],
            [8.6253386002364731, 6.7855868004012025, 0],
            [8.6287861001530963, 6.7890071999326151, 0],
            [8.6310854000887289, 6.7912879001605928, 0],
            [8.6322432002180296, 6.7935758003799531, 0],
            [8.6368407996745589, 6.7981371999707152, 0],
            [8.6403141001887267, 6.8050007997056241, 0],
            [8.6403483996373129, 6.8095941996691769, 0],
            [8.6403741998788561, 6.8130378999405821, 0],
            [8.6415567001824378, 6.8187699003477897, 0],
            [8.6393013000533347, 6.822229900409158, 0],
            [8.6370449003307623, 6.8256897998968835, 0],
            [8.6336308001434734, 6.8268608996293283, 0],
            [8.6302337995530944, 6.8303288999510912, 0],
            [8.6256790004020161, 6.8315091002237569, 0],
            [8.6222733996674581, 6.8338280000908318, 0],
            [8.6200007997373778, 6.8349918999020725, 0],
            [8.6154623001275592, 6.8384680995979901, 0],
            [8.6109247002414193, 6.8419427998938396, 0],
            [8.6075277001267256, 6.8454108003111793, 0],
            [8.6041221999202211, 6.8477311002149177, 0],
            [8.6018572003124856, 6.8500427999264613, 0],
            [8.6007423001062442, 6.8534941996461312, 0],
            [8.6007604999032772, 6.8557910998734233, 0],
            [8.6064891997458552, 6.8591952000297027, 0],
            [8.6089554002112436, 6.8596287002594485, 0],
            [8.619055700435462, 6.8614048996491777, 0],
            [8.6236277001439898, 6.8625221004021038, 0],
            [8.6293311004377051, 6.8624349002197231, 0],
            [8.6361761004377051, 6.8624349002197231, 0],
            [8.6453113997489996, 6.8635200997738242, 0],
            [8.6510247995584937, 6.8646287996798883, 0],
            [8.6544465998416555, 6.8646049996675558, 0],
            [8.6567372997725229, 6.8657379002085168, 0],
            [8.661309199728171, 6.8668542004235205, 0],
            [8.6647406000593534, 6.8679789999584333, 0],
            [8.6693201001153941, 6.8702440003545817, 0],
            [8.6750584000012552, 6.8747959000589169, 0],
            [8.67735769984907, 6.8770771003848497, 0],
            [8.6807965999324086, 6.879350199886975, 0],
            [8.686534900358529, 6.8839030000742314, 0],
            [8.6899747997098675, 6.8861751996920395, 0],
            [8.6934233000147465, 6.8895960002143468, 0],
            [8.6968536002338652, 6.8907199001219714, 0],
            [8.701442700442886, 6.8941330998077577, 0],
            [8.7037419995618261, 6.8964128000858516, 0],
            [8.707163800192923, 6.8963890004328903, 0],
            [8.7151498999699974, 6.8963341999177565, 0],
            [8.7208538002781211, 6.8962950997959664, 0],
            [8.7276906999282584, 6.8951000996818657, 0],
            [8.7333859997570649, 6.8939117999992101, 0],
            [8.7413635000706282, 6.8927102001571532, 0],
            [8.7482089998554766, 6.8926630002796045, 0],
            [8.7539042996464644, 6.8914751998661394, 0],
            [8.7596083002074447, 6.8914360995911341, 0],
            [8.7653046001379611, 6.8902478002927614, 0],
            [8.7698592998206699, 6.8890691003034021, 0],
            [8.7766953001924364, 6.8878740995553596, 0],
            [8.7812424002539693, 6.8855462002817465, 0],
            [8.7857885000701863, 6.8832187997552952, 0],
            [8.7903518996402585, 6.8831868002977536, 0],
            [8.798320799884479, 6.8808359995859334, 0],
            [8.8028765004286438, 6.8796568000836524, 0],
            [8.8074302998458585, 6.8784781003353093, 0],
            [8.8119849998472635, 6.8772978996448284, 0],
            [8.8176804002269193, 6.8761110002590007, 0],
            [8.8222264996569315, 6.8737830998046379, 0],
            [8.8301964000996058, 6.8714318004258166, 0],
            [8.8336095997148547, 6.8702598004485331, 0],
            [8.8393059002138763, 6.8690728996128918, 0],
            [8.8438519996280966, 6.8667449998260279, 0],
            [8.8484068001421807, 6.8655658004424289, 0],
            [8.8518124002722711, 6.8632460001105411, 0],
            [8.8563584997397911, 6.8609189998901323, 0],
            [8.8597726999868343, 6.8597469003303537, 0],
            [8.8643103001459131, 6.8562722001791405, 0],
            [8.8677157997538885, 6.8539519001473792, 0],
            [8.8699979998575369, 6.8539370998533586, 0],
            [8.8745356002035969, 6.8504610003185755, 0],
            [8.8790903002865083, 6.8492808001686356, 0],
            [8.8870335000802232, 6.8434858000380556, 0],
            [8.8915795999387246, 6.8411588997574757, 0],
            [8.8972588002237245, 6.8376750998571678, 0],
            [8.9029464997373715, 6.83533999957743, 0],
            [8.908633200320768, 6.8330039998852001, 0],
            [8.9131794000433651, 6.8306769998924937, 0],
            [8.9188576000755209, 6.8271927997418098, 0],
            [8.9234037002181896, 6.8248658003482046, 0],
            [8.9268092998654414, 6.8225460001321787, 0],
            [8.9294262002446079, 6.8204087996367511, 0],
            [8.9324798998813684, 6.8179149996319079, 0],
            [8.9347447998767571, 6.8156027997124893, 0],
            [8.9397096997602148, 6.8132224003188711, 0],
            [8.943828600054708, 6.8098000996221391, 0],
            [8.9472341999578546, 6.8074799001267028, 0],
            [8.9517717003011974, 6.8040050999959103, 0],
            [8.9574509002562426, 6.8005209002967231, 0],
            [8.9608479002167982, 6.7970537999208389, 0],
            [8.9642533999014162, 6.7947340004401262, 0],
            [8.9687996000017094, 6.7924069995960199, 0],
            [8.972205200207144, 6.7900872002698112, 0],
            [8.9744777999275982, 6.7889228002071986, 0],
            [8.9767427001889715, 6.7866110998868834, 0],
            [8.9790068003870029, 6.7842989000180669, 0],
            [8.9812632001319059, 6.7808390001724197, 0],
            [8.9846601000730093, 6.7773718996189709, 0],
            [8.9880486003118634, 6.7727560996648881, 0],
            [8.9914454998299558, 6.769288999762721, 0],
            [8.9925699001598289, 6.7669840002518047, 0],
            [8.993684799914929, 6.7635331000535288, 0],
            [8.9948005997930647, 6.7600799001754748, 0],
            [8.9947748003020571, 6.7566371001047143, 0],
            [8.9947577004357289, 6.7543401996224413, 0],
            [8.9935913003389505, 6.7509040996366956, 0],
            [8.9912758003604765, 6.7463269001825044, 0],
            [8.990109399578035, 6.7428908003888655, 0],
            [8.9877930003609787, 6.7383150999474717, 0],
            [8.9866265997053727, 6.7348790003599213, 0],
            [8.9843110997299167, 6.7303019002680857, 0],
            [8.981987000033925, 6.7245770003056426, 0],
            [8.9808291996698983, 6.7222891001506193, 0],
            [8.977364500343791, 6.7165731996479456, 0],
            [8.9773473996379334, 6.7142757995726168, 0],
            [8.9750480996396949, 6.7119960997458392, 0],
            [8.9738902998839105, 6.7097081995617698, 0],
            [8.9727325002612961, 6.7074188996413406, 0],
            [8.9704255997984639, 6.7039909000083995, 0],
            [8.9692592998903926, 6.7005548003376108, 0],
            [8.9680920004188813, 6.6971191996375827, 0],
            [8.9692078003489275, 6.6936669004237492, 0],
            [8.970331199934483, 6.6913618996473643, 0],
            [8.9726132997914103, 6.6913470999271221, 0],
            [8.9760361002307096, 6.6913227997232569, 0],
            [8.9783258001086885, 6.6924558000010013, 0],
            [8.9806080004299158, 6.6924400004170099, 0],
            [8.9851798998113512, 6.693556800181601, 0],
            [8.9874535003013492, 6.6923928001895234, 0],
            [8.989734700061911, 6.6923778001895234, 0],
            [8.989734700061911, 6.692377099619134, 0],
            [8.9920157996421395, 6.6923609001343127, 0],
            [8.9976520996748963, 6.6831378999624187, 0],
            [9.004446000268846, 6.676201800230027, 0],
            [9.0112400002378479, 6.6692672001982425, 0],
            [9.0180339997214549, 6.6623321003444254, 0],
            [9.0225457998265011, 6.6554122000201321, 0],
            [9.0270758004430718, 6.6507877997178708, 0],
            [9.0350360996938601, 6.6472887998146719, 0],
            [9.0475596998591783, 6.6437587996443419, 0],
            [9.0589589996891942, 6.642531900057425, 0],
            [9.0703677995893663, 6.6424531999674841, 0],
            [9.0772381003795619, 6.6458501996817025, 0],
            [9.0829677997879852, 6.6492548003928524, 0],
            [9.0852671001831613, 6.651536000369993, 0],
            [9.0932779004064095, 6.6549248997224373, 0],
            [9.0989999996610482, 6.6571822000526799, 0],
            [9.1058701999636398, 6.6605792001332453, 0],
            [9.1093092004323282, 6.6628508998322715, 0],
            [9.1173296002751378, 6.6673879997016758, 0],
            [9.1230764002185989, 6.6730899999418885, 0],
            [9.1290578999248719, 6.6755179996645913, 0],
            [9.1356763996597117, 6.6798911003291535, 0],
            [9.1391076996377691, 6.6810150001575073, 0],
            [9.1459693999488199, 6.6832637998033793, 0],
            [9.1494006996060016, 6.6843891002980396, 0],
            [9.1527119000421493, 6.6843665996876629, 0],
            [9.1539639997036897, 6.6843581000860448, 0],
            [9.1585273997879781, 6.684326200440764, 0],
            [9.1653900003306426, 6.6865748999171117, 0],
            [9.1676712002978373, 6.686559199864476, 0],
            [9.1711025000054338, 6.6876840998097045, 0],
            [9.1756542997846093, 6.6887971995565767, 0],
            [9.1848334998936849, 6.6933298002974189, 0],
            [9.1928290998550981, 6.6944232001727624, 0],
            [9.1970837999598114, 6.6965266003361279, 0],
            [9.1994223002833504, 6.6976827003627664, 0],
            [9.1997004001654386, 6.6978201995890094, 0],
            [9.2088603996587164, 6.7023491999125842, 0],
            [9.2157315995522975, 6.7057461997326842, 0],
            [9.2283057996312436, 6.7091041001906166, 0],
            [9.2385987999681092, 6.7124772003509499, 0],
            [9.2477426995764933, 6.7147111999268363, 0],
            [9.2557544997171348, 6.7181000998981553, 0],
            [9.266030300284692, 6.7191767998711329, 0],
            [9.2705936004526279, 6.7191448003226695, 0],
            [9.2797202998919044, 6.7190827996059843, 0],
            [9.2854328004454878, 6.7201909997805078, 0],
            [9.2911463004183279, 6.7213011003800309, 0],
            [9.2957009997493767, 6.7201199999527574, 0],
            [9.3002643997207421, 6.7200890001134619, 0],
            [9.3036699003751782, 6.7177701002240138, 0],
            [9.3070583002975926, 6.7131537999682953, 0],
            [9.3092975997393257, 6.7073978997986377, 0],
            [9.313809400262544, 6.7004781002834788, 0],
            [9.3183222003831467, 6.6935592001905713, 0],
            [9.325098999555351, 6.68432710023996, 0],
            [9.3341483996650947, 6.6739321000644107, 0],
            [9.343207399899697, 6.6646847997796366, 0],
            [9.3477030004343025, 6.6554688996442044, 0],
            [9.3522147998511507, 6.6485490997747032, 0],
            [9.3578767997904428, 6.6427697998056265, 0],
            [9.3612480004248688, 6.6358580997025163, 0],
            [9.3680419996898472, 6.6289220004237217, 0],
            [9.3725796000150581, 6.6254468002951503, 0],
            [9.377117200384852, 6.6219720999515914, 0],
            [9.3816557002892491, 6.6184958999012551, 0],
            [9.386176099640803, 6.6127237995752512, 0],
            [9.3918543004329074, 6.6092410002911928, 0],
            [9.3963928001085719, 6.6057649003075518, 0],
            [9.4020623999742341, 6.6011337999518984, 0],
            [9.405442199884062, 6.5953698004129571, 0],
            [9.4099711999918174, 6.5907458996920143, 0],
            [9.413191199641588, 6.5874595998367598, 0],
            [9.4133691995606537, 6.5872778999615242, 0],
            [9.416757599675071, 6.5826630999044129, 0],
            [9.420137400041046, 6.5768990997617154, 0],
            [9.4223938003015775, 6.5734391003192147, 0],
            [9.4246491999008271, 6.5699792000634805, 0],
            [9.4280291002794794, 6.564215199829774, 0],
            [9.4325417999184413, 6.5572957998057531, 0],
            [9.4381951996123199, 6.5503678004350876, 0],
            [9.4415921998685679, 6.5469011999069524, 0],
            [9.4461211997027466, 6.5422768995562111, 0],
            [9.4495181999882973, 6.5388087998408464, 0],
            [9.4540643997850591, 6.5364808997104467, 0],
            [9.4586020001754036, 6.5330062000648725, 0],
            [9.46200849969361, 6.5306859002050626, 0],
            [9.4654130999234845, 6.5283670001276377, 0],
            [9.468827199798481, 6.5271949996449523, 0],
            [9.4710922000697497, 6.5248841996071842, 0],
            [9.4722071003783856, 6.52143100025061, 0],
            [9.4733218996696245, 6.5179791002631413, 0],
            [9.4732971001881303, 6.5145349001151267, 0],
            [9.4744120001676588, 6.5110830997762417, 0],
            [9.4743614003090908, 6.5041951995779588, 0],
            [9.474327100150861, 6.499499602800094, 0],
            [9.4731521999213353, 6.4950180002127862, 0],
            [9.4719772004295386, 6.4904342002444491, 0],
            [9.4708195004342333, 6.488145800427195, 0],
            [9.4672861003100603, 6.473245099702071, 0],
            [9.4672346001120449, 6.466357199632891, 0],
            [9.4660348996873651, 6.4583278001437066, 0],
            [9.4673701996575268, 6.4558320002516822, 0]
          ]
        ]
      },
      "properties": {
        "OBJECTID": 13,
        "Name": "Benue",
        "FolderPath": "overpass-turbo.eu export",
        "SymbolID": 0,
        "AltMode": 0,
        "Base": 0,
        "Clamped": -1,
        "Snippet": "",
        "PopupInfo": "",
        "Shape_Length": 999780.03367754538,
        "Shape_Area": 31059488133.141129
      }
    }
  ]
};

interface Sensor {
  id: string;
  name: string;
  lat: number;
  lng: number;
  status: string;
  lastUpdate: Date;
  batteryLevel: number;
}

interface Threat {
  id: string;
  sensorId: string;
  type: string;
  severity: string;
  location: { lat: number; lng: number; name: string };
  timestamp: Date;
  description: string;
  personnel: number;
  status: string;
}

function getRandomBoundaryPoint(coords: number[][]): { lat: number; lng: number } {
  const lengths: number[] = [];
  let totalLength = 0;

  for (let i = 0; i < coords.length - 1; i++) {
    const p1 = coords[i];
    const p2 = coords[i + 1];
    const dx = p2[0] - p1[0];
    const dy = p2[1] - p1[1];
    const len = Math.sqrt(dx * dx + dy * dy);
    lengths.push(len);
    totalLength += len;
  }

  let randDist = Math.random() * totalLength;
  let seg = 0;
  while (randDist > lengths[seg]) {
    randDist -= lengths[seg];
    seg++;
  }

  const p1 = coords[seg];
  const p2 = coords[seg + 1];
  const t = randDist / lengths[seg];
  const lng = p1[0] + t * (p2[0] - p1[0]);
  const lat = p1[1] + t * (p2[1] - p1[1]);

  return { lat, lng };
}

const CommandCenter = () => {
  const [sensors, setSensors] = useState<Sensor[]>([]);
  const [threats, setThreats] = useState<Threat[]>([]);
  const [selectedThreat, setSelectedThreat] = useState<Threat | null>(null);
  const [soundEnabled, setSoundEnabled] = useState(true);
  const [connectionStatus, setConnectionStatus] = useState("disconnected");
  const audioRef = useRef<HTMLAudioElement>(null);
  // const wsRef = useRef<WebSocket | null>(null); Reopen this when you are ready for backend integration

  const geometry = benueBoundaryData.features[0].geometry;
  const boundaryCoords = useMemo(() => {
    return geometry.type === "Polygon"
      ? geometry.coordinates[0]
      : [];
  }, [geometry]);

  // Mock data for demonstration
  useEffect(() => {
    const mockSensors = [
      {
        id: "S001",
        name: "Makurdi Border North",
        lat: 7.7319,
        lng: 8.5211,
        status: "active",
        lastUpdate: new Date(),
        batteryLevel: 85,
      },
      {
        id: "S002",
        name: "Gboko Checkpoint",
        lat: 7.3239,
        lng: 9.0043,
        status: "alert",
        lastUpdate: new Date(),
        batteryLevel: 92,
      },
      {
        id: "S003",
        name: "Otukpo Border East",
        lat: 7.1905,
        lng: 8.1301,
        status: "active",
        lastUpdate: new Date(),
        batteryLevel: 78,
      },
      {
        id: "S004",
        name: "Katsina-Ala West",
        lat: 7.1667,
        lng: 9.2833,
        status: "inactive",
        lastUpdate: new Date(Date.now() - 300000),
        batteryLevel: 45,
      },
      {
        id: "S005",
        name: "Vandeikya South",
        lat: 6.7833,
        lng: 9.0667,
        status: "active",
        lastUpdate: new Date(),
        batteryLevel: 95,
      },
    ];

    // Generate initial threats on the boundary
    const mockThreats = [
      {
        id: "T001",
        sensorId: "S002",
        type: "armed_group",
        severity: "critical",
        location: { ...getRandomBoundaryPoint(boundaryCoords), name: "Border Perimeter North" },
        timestamp: new Date(Date.now() - 120000),
        description:
          "Armed group of 8-10 individuals detected approaching checkpoint. Heavy weapons visible.",
        personnel: 10,
        status: "active",
      },
      {
        id: "T002",
        sensorId: "S001",
        type: "vehicle_movement",
        severity: "medium",
        location: { ...getRandomBoundaryPoint(boundaryCoords), name: "Border Perimeter West" },
        timestamp: new Date(Date.now() - 300000),
        description:
          "Convoy of 3 unmarked vehicles moving towards border crossing at unusual hour.",
        personnel: 5,
        status: "investigating",
      },
      {
        id: "T003",
        sensorId: "S003",
        type: "intrusion",
        severity: "high",
        location: { ...getRandomBoundaryPoint(boundaryCoords), name: "Border Perimeter East" },
        timestamp: new Date(Date.now() - 600000),
        description:
          "Unauthorized border crossing detected. Multiple individuals attempting to bypass checkpoint.",
        personnel: 6,
        status: "active",
      },
    ];

    setSensors(mockSensors);
    setThreats(mockThreats);
  }, [boundaryCoords]);

  // WebSocket connection simulation
  useEffect(() => {
    const connectWebSocket = () => {
      setConnectionStatus("reconnecting");

      // Simulate WebSocket connection
      setTimeout(() => {
        setConnectionStatus("connected");

        // Simulate real-time updates
        const interval = setInterval(() => {
          const now = new Date();

          // Update sensor data
          setSensors((prev) =>
            prev.map((sensor) => ({
              ...sensor,
              lastUpdate: now,
              batteryLevel: Math.max(
                20,
                sensor.batteryLevel - Math.random() * 0.5
              ),
            }))
          );

          // Occasionally add new threats along the boundary
          if (Math.random() < 0.1) {
            const randomPoint = getRandomBoundaryPoint(boundaryCoords);
            const newThreat = {
              id: `T${Date.now()}`,
              sensorId:
                sensors[Math.floor(Math.random() * sensors.length)]?.id ||
                "S001",
              type: [
                "intrusion",
                "suspicious_activity",
                "armed_group",
                "vehicle_movement",
              ][Math.floor(Math.random() * 4)],
              severity: ["low", "medium", "high", "critical"][
                Math.floor(Math.random() * 4)
              ],
              location: {
                lat: randomPoint.lat,
                lng: randomPoint.lng,
                name: "Benue Border Perimeter",
              },
              timestamp: now,
              description:
                "New threat detected by automated surveillance system along the border.",
              personnel: Math.floor(Math.random() * 15) + 1,
              status: "active",
            };

            setThreats((prev) => [newThreat, ...prev]);

            // Play alert sound for critical threats
            if (
              newThreat.severity === "critical" &&
              soundEnabled &&
              audioRef.current
            ) {
              audioRef.current
                .play()
                .catch((e) => console.log("Audio play failed:", e));
            }
          }
        }, 5000);

        return () => {
          clearInterval(interval);
        };
      }, 1000);
    };

    connectWebSocket();
  }, [sensors, soundEnabled, boundaryCoords]);

  interface SeverityColorMap {
    [key: string]: string;
  }

  const getSeverityColor = (severity: keyof SeverityColorMap): string => {
    switch (severity) {
      case "critical":
        return "bg-red-800 text-white";
      case "high":
        return "bg-red-500 text-white";
      case "medium":
        return "bg-yellow-500 text-white";
      case "low":
        return "bg-green-500 text-white";
      default:
        return "bg-gray-500 text-white";
    }
  };

  interface StatusColorMap {
    [key: string]: string;
  }

  type SensorStatus = "active" | "inactive" | "alert";

  const getStatusColor = (status: SensorStatus): string => {
    const colorMap: StatusColorMap = {
      active: "text-green-400",
      inactive: "text-red-400",
      alert: "text-orange-400",
    };
    return colorMap[status] ?? "text-gray-400";
  };

  const activeCriticalThreats = threats.filter(
    (t) => t.severity === "critical" && t.status === "active"
  );

  return (
    <div className="min-h-screen bg-slate-900 text-white">
      {/* Audio element for alerts */}
      <audio ref={audioRef} preload="auto">
        <source
          src="data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmYdAkWRzO+8bSMELH7I79+STApSou7gylUfBhNztu/7uWsFLXjK7dyGOhgWSa/q2qBNCAhxue7/ol4GFWq37LiALgcVdMvq7rliFQZGoOs1t2QNCW+z6v5vKwgacaTt8LpgByl6yO1yMxYNUrHq87RsDBR4p+n5oVIGDW6y69x7NIYOUbLqzZA6BQ93s/Psp1MDBnSo5NqBOAYVaqTp67VhBSp8xs+GNwgSb7Ps6bVhBChxw++wYBoGIneqw/K8YhQFLXvK5dB7MgwPcqHq5q5WEQNZ0n7N50QdCk1pSKq9aUdBgT1nTh2JDQxhsjN7Y"
          type="audio/wav"
        />
      </audio>

      {/* Header */}
      <div className="bg-slate-800 border-b border-slate-700 px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Shield className="w-8 h-8 text-blue-400" />
            <div>
              <h1 className="text-2xl font-bold">
                Benue State Border Surveillance
              </h1>
              <p className="text-slate-400">
                Border Security & Threat Monitoring
              </p>
            </div>
          </div>

          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              <div
                className={`w-3 h-3 rounded-full ${
                  connectionStatus === "connected"
                    ? "bg-green-400 animate-pulse"
                    : "bg-red-400"
                }`}
              />
              <span className="text-sm text-slate-400 capitalize">
                {connectionStatus}
              </span>
            </div>

            <button
              onClick={() => setSoundEnabled(!soundEnabled)}
              className={`p-2 rounded-lg ${
                soundEnabled
                  ? "bg-blue-600 text-white"
                  : "bg-slate-600 text-slate-300"
              }`}
            >
              {soundEnabled ? (
                <Volume2 className="w-5 h-5" />
              ) : (
                <VolumeX className="w-5 h-5" />
              )}
            </button>

            <div className="text-right">
              <div className="text-sm font-medium">
                {new Date().toLocaleTimeString()}
              </div>
              <div className="text-xs text-slate-400">
                {new Date().toLocaleDateString()}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Critical Alert Banner */}
      {activeCriticalThreats.length > 0 && (
        <Alert variant="destructive" className="px-6 py-3 animate-pulse">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            <div className="flex items-center space-x-2">
              <span className="font-semibold">
                CRITICAL ALERT: {activeCriticalThreats.length} active critical
                threat{activeCriticalThreats.length > 1 ? "s" : ""} detected
              </span>
              <Bell className="w-5 h-5 animate-bounce" />
            </div>
          </AlertDescription>
        </Alert>
      )}

      <div className="flex flex-1">
        {/* Main Content */}
        <div className="flex-1 p-6">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
            {/* Statistics Cards */}
            <div className="bg-slate-800 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-400 text-sm">Active Sensors</p>
                  <p className="text-2xl font-bold text-green-400">
                    {sensors.filter((s) => s.status === "active").length}
                  </p>
                </div>
                <Activity className="w-8 h-8 text-green-400" />
              </div>
            </div>

            <div className="bg-slate-800 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-400 text-sm">Active Threats</p>
                  <p className="text-2xl font-bold text-red-400">
                    {threats.filter((t) => t.status === "active").length}
                  </p>
                </div>
                <Target className="w-8 h-8 text-red-400" />
              </div>
            </div>

            <div className="bg-slate-800 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-400 text-sm">Personnel Deployed</p>
                  <p className="text-2xl font-bold text-blue-400">
                    {threats.reduce((sum, t) => sum + t.personnel, 0)}
                  </p>
                </div>
                <Users className="w-8 h-8 text-blue-400" />
              </div>
            </div>
          </div>

          {/* Map Area */}
          <div className="bg-slate-800 rounded-lg p-4 mb-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-semibold flex items-center space-x-2">
                <MapPin className="w-5 h-5" />
                <span>Benue State Border Map</span>
              </h2>
              <div className="flex space-x-4">
                <div className="flex items-center space-x-1 text-sm text-blue-400">
                  <div className="w-3 h-3 bg-blue-400 rounded"></div>
                  <span>Sensors</span>
                </div>
                <div className="flex items-center space-x-1 text-sm text-red-400">
                  <div className="w-3 h-3 bg-red-400 rounded-full"></div>
                  <span>Threats</span>
                </div>
                <div className="flex items-center space-x-1 text-sm text-purple-400">
                  <Eye className="w-3 h-3" />
                  <span>Surveillance</span>
                </div>
              </div>
            </div>

            <div className="rounded-lg h-[90vh]">
              <MapContainer
                center={[7.4, 8.6]}
                zoom={8}
                style={{ height: "100%", width: "100%" }}
                preferCanvas={true}
              >
                <TileLayer
                  attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                  url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                />
                {/* Benue State GeoJSON Boundary */}
                <GeoJSON
                  data={benueBoundaryData}
                  style={() => ({
                    color: "blue",
                    weight: 2,
                    fillOpacity: 0.2,
                    fillColor: "blue",
                  })}
                />

                {/* Sensors */}
                {sensors.map((sensor) => (
                  <Marker position={[sensor.lat, sensor.lng]} key={sensor.id}>
                    <Popup>
                      {sensor.name}
                      <br />
                      Status: {sensor.status}
                      <br />
                      Battery: {sensor.batteryLevel}%
                    </Popup>
                  </Marker>
                ))}
                {threats
                  .filter((t) => t.status === "active")
                  .map((threat) => (
                    <Circle
                      key={threat.id}
                      center={[threat.location.lat, threat.location.lng]}
                      radius={1000}
                      pathOptions={{
                        color:
                          threat.severity === "critical"
                            ? "red"
                            : threat.severity === "high"
                            ? "orange"
                            : threat.severity === "medium"
                            ? "yellow"
                            : "green",
                        fillOpacity: 0.5,
                      }}
                      eventHandlers={{
                        click: () => {
                          setSelectedThreat(threat);
                        },
                      }}
                    >
                      <Popup>
                        {threat.type.replace("_", " ").toUpperCase()}
                        <br />
                        {threat.description}
                        <br />
                        Severity: {threat.severity.toUpperCase()}
                      </Popup>
                    </Circle>
                  ))}
              </MapContainer>
            </div>
          </div>

          {/* Video Feeds */}
          <div className="bg-slate-800 rounded-lg p-4">
            <h2 className="text-lg font-semibold mb-4 flex items-center space-x-2">
              <Camera className="w-5 h-5" />
              <span>Live Video Feeds</span>
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {sensors.slice(0, 6).map((sensor) => (
                <div key={sensor.id} className="bg-slate-700 rounded-lg p-3">
                  <div className="bg-black rounded aspect-video mb-2 flex items-center justify-center">
                    <div className="text-slate-400 text-center">
                      <Camera className="w-8 h-8 mx-auto mb-2" />
                      <div className="text-xs">Camera {sensor.id}</div>
                      <div className="text-xs">{sensor.name}</div>
                    </div>
                  </div>
                  <div className="flex justify-between items-center text-xs">
                    <span
                      className={getStatusColor(sensor.status as SensorStatus)}
                    >
                      {sensor.status}
                    </span>
                    <span className="text-slate-400">
                      Battery: {sensor.batteryLevel}%
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Sidebar - Threat List */}
        <div className="w-80 bg-slate-800 border-l border-slate-700 p-4 overflow-y-auto">
          <h2 className="text-lg font-semibold mb-4 flex items-center space-x-2">
            <AlertTriangle className="w-5 h-5" />
            <span>Active Threats</span>
          </h2>

          <div className="mb-6" style={{ height: '50vh' }}>
            <Virtuoso
              style={{ height: '100%' }}
              data={threats}
              itemContent={(_, threat) => (
                <div
                  key={threat.id}
                  className={`bg-slate-700 rounded-lg p-3 cursor-pointer transition-colors
                    ${selectedThreat?.id === threat.id ? "ring-2 ring-blue-400" : ""}
                    hover:bg-slate-600`}
                  onClick={() => setSelectedThreat(threat)}
                >
                  <div className="flex items-center justify-between mb-2">
                    <span
                      className={`px-2 py-1 rounded text-xs font-medium ${getSeverityColor(
                        threat.severity
                      )}`}
                    >
                      {threat.severity.toUpperCase()}
                    </span>
                    <div className="flex items-center space-x-1 text-xs text-slate-400">
                      <Clock className="w-3 h-3" />
                      <span>
                        {new Date(threat.timestamp).toLocaleTimeString()}
                      </span>
                    </div>
                  </div>

                  <h3 className="font-medium mb-1">
                    {threat.type.replace("_", " ").toUpperCase()}
                  </h3>
                  <p className="text-sm text-slate-300 mb-2">
                    {threat.description}
                  </p>

                  <div className="flex items-center justify-between text-xs text-slate-400">
                    <span className="flex items-center space-x-1">
                      <MapPin className="w-3 h-3" />
                      <span>{threat.location.name}</span>
                    </span>
                    <span className="flex items-center space-x-1">
                      <Users className="w-3 h-3" />
                      <span>{threat.personnel}</span>
                    </span>
                  </div>

                  <div className="mt-2 flex space-x-2">
                    <button className="px-2 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-500">
                      Deploy
                    </button>
                    <button className="px-2 py-1 bg-gray-600 text-white text-xs rounded hover:bg-gray-500">
                      Investigate
                    </button>
                  </div>
                </div>
              )}
            />
          </div>

          {/* Sensor Status */}
          <div className="mt-6">
            <h3 className="text-md font-semibold mb-3 flex items-center space-x-2">
              <Zap className="w-4 h-4" />
              <span>Sensor Status</span>
            </h3>

            <div className="space-y-2">
              {sensors.map((sensor) => (
                <div key={sensor.id} className="bg-slate-700 rounded p-2">
                  <div className="flex items-center justify-between mb-1">
                    <span className="text-sm font-medium">{sensor.name}</span>
                    <span
                      className={`text-xs ${getStatusColor(
                        sensor.status as SensorStatus
                      )}`}
                    >
                      {sensor.status}
                    </span>
                  </div>
                  <div className="flex items-center justify-between text-xs text-slate-400">
                    <span>ID: {sensor.id}</span>
                    <span>Battery: {sensor.batteryLevel.toFixed(1)}%</span>
                  </div>
                  <div className="w-full bg-slate-600 rounded-full h-1 mt-1">
                    <div
                      className="bg-green-400 h-1 rounded-full"
                      style={{ width: `${sensor.batteryLevel}%` }}
                    />
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Threat Detail Modal */}
      {selectedThreat && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="fixed bg-slate-800 rounded-lg p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-bold">Threat Details</h2>
              <button
                onClick={() => setSelectedThreat(null)}
                className="text-slate-400 hover:text-white"
              >
                ×
              </button>
            </div>

            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="text-sm text-slate-400">Threat ID</label>
                  <p className="font-medium">{selectedThreat.id}</p>
                </div>
                <div>
                  <label className="text-sm text-slate-400">Severity</label>
                  <span
                    className={`inline-block px-2 py-1 rounded text-sm font-medium ${getSeverityColor(
                      selectedThreat.severity
                    )}`}
                  >
                    {selectedThreat.severity.toUpperCase()}
                  </span>
                </div>
              </div>

              <div>
                <label className="text-sm text-slate-400">Description</label>
                <p className="text-slate-200">{selectedThreat.description}</p>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="text-sm text-slate-400">Location</label>
                  <p className="font-medium">{selectedThreat.location.name}</p>
                </div>
                <div>
                  <label className="text-sm text-slate-400">
                    Personnel Deployed
                  </label>
                  <p className="font-medium">{selectedThreat.personnel}</p>
                </div>
              </div>

              <div>
                <label className="text-sm text-slate-400">Timestamp</label>
                <p className="font-medium">
                  {selectedThreat.timestamp.toLocaleString()}
                </p>
              </div>

              <div className="flex space-x-3 mt-6">
                <button className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-500">
                  Deploy Emergency Response
                </button>
                <button className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-500">
                  Request Backup
                </button>
                <button className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-500">
                  Mark Investigating
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CommandCenter;

















// THIS IS THE DEFAULT CODE
// import { useState, useEffect, useRef } from "react";
// import {
//   AlertTriangle,
//   Shield,
//   MapPin,
//   Camera,
//   Users,
//   Clock,
//   Volume2,
//   VolumeX,
//   Eye,
//   Zap,
//   Target,
//   Bell,
//   Activity,
// } from "lucide-react";
// import { Alert, AlertDescription } from "@/components/ui/alert";
// import { GeoJSON } from "react-leaflet";
// import benueBoundaryData from "../data/benue1.geojson.json";
// import type { FeatureCollection } from "geojson";
// import { MapContainer, TileLayer, Marker, Popup, Circle } from "react-leaflet";
// import { Virtuoso } from "react-virtuoso";
// import "leaflet/dist/leaflet.css";

// interface Sensor {
//   id: string;
//   name: string;
//   lat: number;
//   lng: number;
//   status: string;
//   lastUpdate: Date;
//   batteryLevel: number;
// }

// interface Threat {
//   id: string;
//   sensorId: string;
//   type: string;
//   severity: string;
//   location: { lat: number; lng: number; name: string };
//   timestamp: Date;
//   description: string;
//   personnel: number;
//   status: string;
// }

// const CommandCenter = () => {
//   const [sensors, setSensors] = useState<Sensor[]>([]);
//   const [threats, setThreats] = useState<Threat[]>([]);
//   const [selectedThreat, setSelectedThreat] = useState<Threat | null>(null);
//   const [soundEnabled, setSoundEnabled] = useState(true);
//   const [connectionStatus, setConnectionStatus] = useState("disconnected");
//   const audioRef = useRef<HTMLAudioElement>(null);
//   // const wsRef = useRef<WebSocket | null>(null); Reopen this when you are ready for backend integration

//   // Mock data for demonstration
//   useEffect(() => {
//     const mockSensors = [
//       {
//         id: "S001",
//         name: "Makurdi Border North",
//         lat: 7.7319,
//         lng: 8.5211,
//         status: "active",
//         lastUpdate: new Date(),
//         batteryLevel: 85,
//       },
//       {
//         id: "S002",
//         name: "Gboko Checkpoint",
//         lat: 7.3239,
//         lng: 9.0043,
//         status: "alert",
//         lastUpdate: new Date(),
//         batteryLevel: 92,
//       },
//       {
//         id: "S003",
//         name: "Otukpo Border East",
//         lat: 7.1905,
//         lng: 8.1301,
//         status: "active",
//         lastUpdate: new Date(),
//         batteryLevel: 78,
//       },
//       {
//         id: "S004",
//         name: "Katsina-Ala West",
//         lat: 7.1667,
//         lng: 9.2833,
//         status: "inactive",
//         lastUpdate: new Date(Date.now() - 300000),
//         batteryLevel: 45,
//       },
//       {
//         id: "S005",
//         name: "Vandeikya South",
//         lat: 6.7833,
//         lng: 9.0667,
//         status: "active",
//         lastUpdate: new Date(),
//         batteryLevel: 95,
//       },
//     ];

//     const mockThreats = [
//       {
//         id: "T001",
//         sensorId: "S002",
//         type: "armed_group",
//         severity: "critical",
//         location: { lat: 7.3239, lng: 9.0043, name: "Gboko Checkpoint" },
//         timestamp: new Date(Date.now() - 120000),
//         description:
//           "Armed group of 8-10 individuals detected approaching checkpoint. Heavy weapons visible.",
//         personnel: 10,
//         status: "active",
//       },
//       {
//         id: "T002",
//         sensorId: "S001",
//         type: "vehicle_movement",
//         severity: "medium",
//         location: { lat: 7.7319, lng: 8.5211, name: "Makurdi Border North" },
//         timestamp: new Date(Date.now() - 300000),
//         description:
//           "Convoy of 3 unmarked vehicles moving towards border crossing at unusual hour.",
//         personnel: 5,
//         status: "investigating",
//       },
//       {
//         id: "T003",
//         sensorId: "S003",
//         type: "intrusion",
//         severity: "high",
//         location: { lat: 7.1905, lng: 8.1301, name: "Otukpo Border East" },
//         timestamp: new Date(Date.now() - 600000),
//         description:
//           "Unauthorized border crossing detected. Multiple individuals attempting to bypass checkpoint.",
//         personnel: 6,
//         status: "active",
//       },
//     ];

//     setSensors(mockSensors);
//     setThreats(mockThreats);
//   }, []);

//   // WebSocket connection simulation
//   useEffect(() => {
//     const connectWebSocket = () => {
//       setConnectionStatus("reconnecting");

//       // Simulate WebSocket connection
//       setTimeout(() => {
//         setConnectionStatus("connected");

//         // Simulate real-time updates
//         const interval = setInterval(() => {
//           const now = new Date();

//           // Update sensor data
//           setSensors((prev) =>
//             prev.map((sensor) => ({
//               ...sensor,
//               lastUpdate: now,
//               batteryLevel: Math.max(
//                 20,
//                 sensor.batteryLevel - Math.random() * 0.5
//               ),
//             }))
//           );

//           // Occasionally add new threats
//           if (Math.random() < 0.1) {
//             const newThreat = {
//               id: `T${Date.now()}`,
//               sensorId:
//                 sensors[Math.floor(Math.random() * sensors.length)]?.id ||
//                 "S001",
//               type: [
//                 "intrusion",
//                 "suspicious_activity",
//                 "armed_group",
//                 "vehicle_movement",
//               ][Math.floor(Math.random() * 4)],
//               severity: ["low", "medium", "high", "critical"][
//                 Math.floor(Math.random() * 4)
//               ],
//               location: {
//                 lat: 7 + Math.random(),
//                 lng: 8 + Math.random(),
//                 name: "New Location",
//               },
//               timestamp: now,
//               description:
//                 "New threat detected by automated surveillance system.",
//               personnel: Math.floor(Math.random() * 15) + 1,
//               status: "active",
//             };

//             setThreats((prev) => [newThreat, ...prev]);

//             // Play alert sound for critical threats
//             if (
//               newThreat.severity === "critical" &&
//               soundEnabled &&
//               audioRef.current
//             ) {
//               audioRef.current
//                 .play()
//                 .catch((e) => console.log("Audio play failed:", e));
//             }
//           }
//         }, 5000);

//         return () => {
//           clearInterval(interval);
//         };
//       }, 1000);
//     };

//     connectWebSocket();
//   }, [sensors, soundEnabled]);

//   interface SeverityColorMap {
//     [key: string]: string;
//   }

//   const getSeverityColor = (severity: keyof SeverityColorMap): string => {
//     switch (severity) {
//       case "critical":
//         return "bg-red-800 text-white";
//       case "high":
//         return "bg-red-500 text-white";
//       case "medium":
//         return "bg-yellow-500 text-white";
//       case "low":
//         return "bg-green-500 text-white";
//       default:
//         return "bg-gray-500 text-white";
//     }
//   };

//   interface StatusColorMap {
//     [key: string]: string;
//   }

//   type SensorStatus = "active" | "inactive" | "alert";

//   const getStatusColor = (status: SensorStatus): string => {
//     const colorMap: StatusColorMap = {
//       active: "text-green-400",
//       inactive: "text-red-400",
//       alert: "text-orange-400",
//     };
//     return colorMap[status] ?? "text-gray-400";
//   };

//   const activeCriticalThreats = threats.filter(
//     (t) => t.severity === "critical" && t.status === "active"
//   );

//   return (
//     <div className="min-h-screen bg-slate-900 text-white">
//       {/* Audio element for alerts */}
//       <audio ref={audioRef} preload="auto">
//         <source
//           src="data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmYdAkWRzO+8bSMELH7I79+STApSou7gylUfBhNztu/7uWsFLXjK7dyGOhgWSa/q2qBNCAhxue7/ol4GFWq37LiALgcVdMvq7rliFQZGoOs1t2QNCW+z6v5vKwgacaTt8LpgByl6yO1yMxYNUrHq87RsDBR4p+n5oVIGDW6y69x7NIYOUbLqzZA6BQ93s/Psp1MDBnSo5NqBOAYVaqTp67VhBSp8xs+GNwgSb7Ps6bVhBChxw++wYBoGIneqw/K8YhQFLXvK5dB7MgwPcqHq5q5WEQNZ0n7N50QdCk1pSKq9aUdBgT1nTh2JDQxhsjN7Y"
//           type="audio/wav"
//         />
//       </audio>

//       {/* Header */}
//       <div className="bg-slate-800 border-b border-slate-700 px-6 py-4">
//         <div className="flex items-center justify-between">
//           <div className="flex items-center space-x-4">
//             <Shield className="w-8 h-8 text-blue-400" />
//             <div>
//               <h1 className="text-2xl font-bold">
//                 Benue State Border Surveillance
//               </h1>
//               <p className="text-slate-400">
//                 Border Security & Threat Monitoring
//               </p>
//             </div>
//           </div>

//           <div className="flex items-center space-x-4">
//             <div className="flex items-center space-x-2">
//               <div
//                 className={`w-3 h-3 rounded-full ${
//                   connectionStatus === "connected"
//                     ? "bg-green-400 animate-pulse"
//                     : "bg-red-400"
//                 }`}
//               />
//               <span className="text-sm text-slate-400 capitalize">
//                 {connectionStatus}
//               </span>
//             </div>

//             <button
//               onClick={() => setSoundEnabled(!soundEnabled)}
//               className={`p-2 rounded-lg ${
//                 soundEnabled
//                   ? "bg-blue-600 text-white"
//                   : "bg-slate-600 text-slate-300"
//               }`}
//             >
//               {soundEnabled ? (
//                 <Volume2 className="w-5 h-5" />
//               ) : (
//                 <VolumeX className="w-5 h-5" />
//               )}
//             </button>

//             <div className="text-right">
//               <div className="text-sm font-medium">
//                 {new Date().toLocaleTimeString()}
//               </div>
//               <div className="text-xs text-slate-400">
//                 {new Date().toLocaleDateString()}
//               </div>
//             </div>
//           </div>
//         </div>
//       </div>

//       {/* Critical Alert Banner */}
//       {activeCriticalThreats.length > 0 && (
//         <Alert variant="destructive" className="px-6 py-3 animate-pulse">
//           <AlertTriangle className="h-4 w-4" />
//           <AlertDescription>
//             <div className="flex items-center space-x-2">
//               <span className="font-semibold">
//                 CRITICAL ALERT: {activeCriticalThreats.length} active critical
//                 threat{activeCriticalThreats.length > 1 ? "s" : ""} detected
//               </span>
//               <Bell className="w-5 h-5 animate-bounce" />
//             </div>
//           </AlertDescription>
//         </Alert>
//       )}

//       <div className="flex flex-1">
//         {/* Main Content */}
//         <div className="flex-1 p-6">
//           <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
//             {/* Statistics Cards */}
//             <div className="bg-slate-800 rounded-lg p-4">
//               <div className="flex items-center justify-between">
//                 <div>
//                   <p className="text-slate-400 text-sm">Active Sensors</p>
//                   <p className="text-2xl font-bold text-green-400">
//                     {sensors.filter((s) => s.status === "active").length}
//                   </p>
//                 </div>
//                 <Activity className="w-8 h-8 text-green-400" />
//               </div>
//             </div>

//             <div className="bg-slate-800 rounded-lg p-4">
//               <div className="flex items-center justify-between">
//                 <div>
//                   <p className="text-slate-400 text-sm">Active Threats</p>
//                   <p className="text-2xl font-bold text-red-400">
//                     {threats.filter((t) => t.status === "active").length}
//                   </p>
//                 </div>
//                 <Target className="w-8 h-8 text-red-400" />
//               </div>
//             </div>

//             <div className="bg-slate-800 rounded-lg p-4">
//               <div className="flex items-center justify-between">
//                 <div>
//                   <p className="text-slate-400 text-sm">Personnel Deployed</p>
//                   <p className="text-2xl font-bold text-blue-400">
//                     {threats.reduce((sum, t) => sum + t.personnel, 0)}
//                   </p>
//                 </div>
//                 <Users className="w-8 h-8 text-blue-400" />
//               </div>
//             </div>
//           </div>

//           {/* Map Area */}
//           <div className="bg-slate-800 rounded-lg p-4 mb-6">
//             <div className="flex items-center justify-between mb-4">
//               <h2 className="text-lg font-semibold flex items-center space-x-2">
//                 <MapPin className="w-5 h-5" />
//                 <span>Benue State Border Map</span>
//               </h2>
//               <div className="flex space-x-4">
//                 <div className="flex items-center space-x-1 text-sm text-blue-400">
//                   <div className="w-3 h-3 bg-blue-400 rounded"></div>
//                   <span>Sensors</span>
//                 </div>
//                 <div className="flex items-center space-x-1 text-sm text-red-400">
//                   <div className="w-3 h-3 bg-red-400 rounded-full"></div>
//                   <span>Threats</span>
//                 </div>
//                 <div className="flex items-center space-x-1 text-sm text-purple-400">
//                   <Eye className="w-3 h-3" />
//                   <span>Surveillance</span>
//                 </div>
//               </div>
//             </div>

//             <div className="rounded-lg h-[90vh]">
//               <MapContainer
//                 center={[7.4, 8.6]}
//                 zoom={8}
//                 style={{ height: "100%", width: "100%" }}
//                 preferCanvas={true}
//               >
//                 <TileLayer
//                   attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
//                   url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
//                 />
//                 {/* Benue State Border */}
//                 {/* Benue State GeoJSON Boundary */}
//                 <GeoJSON
//                   data={benueBoundaryData as FeatureCollection}
//                   style={() => ({
//                     color: "blue",
//                     weight: 2,
//                     fillOpacity: 0.2,
//                     fillColor: "blue",
//                   })}
//                 />

//                 {/* Sensors */}
//                 {sensors.map((sensor) => (
//                   <Marker position={[sensor.lat, sensor.lng]} key={sensor.id}>
//                     <Popup>
//                       {sensor.name}
//                       <br />
//                       Status: {sensor.status}
//                       <br />
//                       Battery: {sensor.batteryLevel}%
//                     </Popup>
//                   </Marker>
//                 ))}
//                 {threats
//                   .filter((t) => t.status === "active")
//                   .map((threat) => (
//                     <Circle
//                       key={threat.id}
//                       center={[threat.location.lat, threat.location.lng]}
//                       radius={1000}
//                       pathOptions={{
//                         color:
//                           threat.severity === "critical"
//                             ? "red"
//                             : threat.severity === "high"
//                             ? "orange"
//                             : threat.severity === "medium"
//                             ? "yellow"
//                             : "green",
//                         fillOpacity: 0.5,
//                       }}
//                       eventHandlers={{
//                         click: () => {
//                           setSelectedThreat(threat);
//                         },
//                       }}
//                     >
//                       <Popup>
//                         {threat.type.replace("_", " ").toUpperCase()}
//                         <br />
//                         {threat.description}
//                         <br />
//                         Severity: {threat.severity.toUpperCase()}
//                       </Popup>
//                     </Circle>
//                   ))}
//               </MapContainer>
//             </div>
//           </div>

//           {/* Video Feeds */}
//           <div className="bg-slate-800 rounded-lg p-4">
//             <h2 className="text-lg font-semibold mb-4 flex items-center space-x-2">
//               <Camera className="w-5 h-5" />
//               <span>Live Video Feeds</span>
//             </h2>
//             <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
//               {sensors.slice(0, 6).map((sensor) => (
//                 <div key={sensor.id} className="bg-slate-700 rounded-lg p-3">
//                   <div className="bg-black rounded aspect-video mb-2 flex items-center justify-center">
//                     <div className="text-slate-400 text-center">
//                       <Camera className="w-8 h-8 mx-auto mb-2" />
//                       <div className="text-xs">Camera {sensor.id}</div>
//                       <div className="text-xs">{sensor.name}</div>
//                     </div>
//                   </div>
//                   <div className="flex justify-between items-center text-xs">
//                     <span
//                       className={getStatusColor(sensor.status as SensorStatus)}
//                     >
//                       {sensor.status}
//                     </span>
//                     <span className="text-slate-400">
//                       Battery: {sensor.batteryLevel}%
//                     </span>
//                   </div>
//                 </div>
//               ))}
//             </div>
//           </div>
//         </div>

//         {/* Sidebar - Threat List */}
//         <div className="w-80 bg-slate-800 border-l border-slate-700 p-4 overflow-y-auto">
//           <h2 className="text-lg font-semibold mb-4 flex items-center space-x-2">
//             <AlertTriangle className="w-5 h-5" />
//             <span>Active Threats</span>
//           </h2>

//           <div className="mb-6" style={{ height: '50vh' }}>
//             <Virtuoso
//               style={{ height: '100%' }}
//               data={threats}
//               itemContent={(_, threat) => (
//                 <div
//                   key={threat.id}
//                   className={`bg-slate-700 rounded-lg p-3 cursor-pointer transition-colors
//                     ${selectedThreat?.id === threat.id ? "ring-2 ring-blue-400" : ""}
//                     hover:bg-slate-600`}
//                   onClick={() => setSelectedThreat(threat)}
//                 >
//                   <div className="flex items-center justify-between mb-2">
//                     <span
//                       className={`px-2 py-1 rounded text-xs font-medium ${getSeverityColor(
//                         threat.severity
//                       )}`}
//                     >
//                       {threat.severity.toUpperCase()}
//                     </span>
//                     <div className="flex items-center space-x-1 text-xs text-slate-400">
//                       <Clock className="w-3 h-3" />
//                       <span>
//                         {new Date(threat.timestamp).toLocaleTimeString()}
//                       </span>
//                     </div>
//                   </div>

//                   <h3 className="font-medium mb-1">
//                     {threat.type.replace("_", " ").toUpperCase()}
//                   </h3>
//                   <p className="text-sm text-slate-300 mb-2">
//                     {threat.description}
//                   </p>

//                   <div className="flex items-center justify-between text-xs text-slate-400">
//                     <span className="flex items-center space-x-1">
//                       <MapPin className="w-3 h-3" />
//                       <span>{threat.location.name}</span>
//                     </span>
//                     <span className="flex items-center space-x-1">
//                       <Users className="w-3 h-3" />
//                       <span>{threat.personnel}</span>
//                     </span>
//                   </div>

//                   <div className="mt-2 flex space-x-2">
//                     <button className="px-2 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-500">
//                       Deploy
//                     </button>
//                     <button className="px-2 py-1 bg-gray-600 text-white text-xs rounded hover:bg-gray-500">
//                       Investigate
//                     </button>
//                   </div>
//                 </div>
//               )}
//             />
//           </div>

//           {/* Sensor Status */}
//           <div className="mt-6">
//             <h3 className="text-md font-semibold mb-3 flex items-center space-x-2">
//               <Zap className="w-4 h-4" />
//               <span>Sensor Status</span>
//             </h3>

//             <div className="space-y-2">
//               {sensors.map((sensor) => (
//                 <div key={sensor.id} className="bg-slate-700 rounded p-2">
//                   <div className="flex items-center justify-between mb-1">
//                     <span className="text-sm font-medium">{sensor.name}</span>
//                     <span
//                       className={`text-xs ${getStatusColor(
//                         sensor.status as SensorStatus
//                       )}`}
//                     >
//                       {sensor.status}
//                     </span>
//                   </div>
//                   <div className="flex items-center justify-between text-xs text-slate-400">
//                     <span>ID: {sensor.id}</span>
//                     <span>Battery: {sensor.batteryLevel.toFixed(1)}%</span>
//                   </div>
//                   <div className="w-full bg-slate-600 rounded-full h-1 mt-1">
//                     <div
//                       className="bg-green-400 h-1 rounded-full"
//                       style={{ width: `${sensor.batteryLevel}%` }}
//                     />
//                   </div>
//                 </div>
//               ))}
//             </div>
//           </div>
//         </div>
//       </div>

//       {/* Threat Detail Modal */}
//       {selectedThreat && (
//         <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
//           <div className="bg-slate-800 rounded-lg p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
//             <div className="flex items-center justify-between mb-4">
//               <h2 className="text-xl font-bold">Threat Details</h2>
//               <button
//                 onClick={() => setSelectedThreat(null)}
//                 className="text-slate-400 hover:text-white"
//               >
//                 ×
//               </button>
//             </div>

//             <div className="space-y-4">
//               <div className="grid grid-cols-2 gap-4">
//                 <div>
//                   <label className="text-sm text-slate-400">Threat ID</label>
//                   <p className="font-medium">{selectedThreat.id}</p>
//                 </div>
//                 <div>
//                   <label className="text-sm text-slate-400">Severity</label>
//                   <span
//                     className={`inline-block px-2 py-1 rounded text-sm font-medium ${getSeverityColor(
//                       selectedThreat.severity
//                     )}`}
//                   >
//                     {selectedThreat.severity.toUpperCase()}
//                   </span>
//                 </div>
//               </div>

//               <div>
//                 <label className="text-sm text-slate-400">Description</label>
//                 <p className="text-slate-200">{selectedThreat.description}</p>
//               </div>

//               <div className="grid grid-cols-2 gap-4">
//                 <div>
//                   <label className="text-sm text-slate-400">Location</label>
//                   <p className="font-medium">{selectedThreat.location.name}</p>
//                 </div>
//                 <div>
//                   <label className="text-sm text-slate-400">
//                     Personnel Deployed
//                   </label>
//                   <p className="font-medium">{selectedThreat.personnel}</p>
//                 </div>
//               </div>

//               <div>
//                 <label className="text-sm text-slate-400">Timestamp</label>
//                 <p className="font-medium">
//                   {selectedThreat.timestamp.toLocaleString()}
//                 </p>
//               </div>

//               <div className="flex space-x-3 mt-6">
//                 <button className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-500">
//                   Deploy Emergency Response
//                 </button>
//                 <button className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-500">
//                   Request Backup
//                 </button>
//                 <button className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-500">
//                   Mark Investigating
//                 </button>
//               </div>
//             </div>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default CommandCenter;



















// THE MAP WITH BENUE STATE BOUNDARY
// import { useState, useEffect, useRef } from "react";
// import {
//   AlertTriangle,
//   Shield,
//   MapPin,
//   Camera,
//   Users,
//   Clock,
//   Volume2,
//   VolumeX,
//   Eye,
//   Zap,
//   Target,
//   Bell,
//   Activity,
// } from "lucide-react";
// import { Alert, AlertDescription } from "@/components/ui/alert";
// import { GeoJSON } from "react-leaflet";
// import benueBoundaryData from "../data/benue1.geojson.json";
// import type { FeatureCollection } from "geojson";
// import { MapContainer, TileLayer, Marker, Popup, Circle } from "react-leaflet";
// import "leaflet/dist/leaflet.css";

// interface Sensor {
//   id: string;
//   name: string;
//   lat: number;
//   lng: number;
//   status: string;
//   lastUpdate: Date;
//   batteryLevel: number;
// }

// interface Threat {
//   id: string;
//   sensorId: string;
//   type: string;
//   severity: string;
//   location: { lat: number; lng: number; name: string };
//   timestamp: Date;
//   description: string;
//   personnel: number;
//   status: string;
// }

// const CommandCenter = () => {
//   const [sensors, setSensors] = useState<Sensor[]>([]);
//   const [threats, setThreats] = useState<Threat[]>([]);
//   const [selectedThreat, setSelectedThreat] = useState<Threat | null>(null);
//   const [soundEnabled, setSoundEnabled] = useState(true);
//   const [connectionStatus, setConnectionStatus] = useState("disconnected");
//   const audioRef = useRef<HTMLAudioElement>(null);
//   // const wsRef = useRef<WebSocket | null>(null); Reopen this when you are ready for backend integration

//   // Mock data for demonstration
//   useEffect(() => {
//     const mockSensors = [
//       {
//         id: "S001",
//         name: "Makurdi Border North",
//         lat: 7.7319,
//         lng: 8.5211,
//         status: "active",
//         lastUpdate: new Date(),
//         batteryLevel: 85,
//       },
//       {
//         id: "S002",
//         name: "Gboko Checkpoint",
//         lat: 7.3239,
//         lng: 9.0043,
//         status: "alert",
//         lastUpdate: new Date(),
//         batteryLevel: 92,
//       },
//       {
//         id: "S003",
//         name: "Otukpo Border East",
//         lat: 7.1905,
//         lng: 8.1301,
//         status: "active",
//         lastUpdate: new Date(),
//         batteryLevel: 78,
//       },
//       {
//         id: "S004",
//         name: "Katsina-Ala West",
//         lat: 7.1667,
//         lng: 9.2833,
//         status: "inactive",
//         lastUpdate: new Date(Date.now() - 300000),
//         batteryLevel: 45,
//       },
//       {
//         id: "S005",
//         name: "Vandeikya South",
//         lat: 6.7833,
//         lng: 9.0667,
//         status: "active",
//         lastUpdate: new Date(),
//         batteryLevel: 95,
//       },
//     ];

//     const mockThreats = [
//       {
//         id: "T001",
//         sensorId: "S002",
//         type: "armed_group",
//         severity: "critical",
//         location: { lat: 7.3239, lng: 9.0043, name: "Gboko Checkpoint" },
//         timestamp: new Date(Date.now() - 120000),
//         description:
//           "Armed group of 8-10 individuals detected approaching checkpoint. Heavy weapons visible.",
//         personnel: 10,
//         status: "active",
//       },
//       {
//         id: "T002",
//         sensorId: "S001",
//         type: "vehicle_movement",
//         severity: "medium",
//         location: { lat: 7.7319, lng: 8.5211, name: "Makurdi Border North" },
//         timestamp: new Date(Date.now() - 300000),
//         description:
//           "Convoy of 3 unmarked vehicles moving towards border crossing at unusual hour.",
//         personnel: 5,
//         status: "investigating",
//       },
//       {
//         id: "T003",
//         sensorId: "S003",
//         type: "intrusion",
//         severity: "high",
//         location: { lat: 7.1905, lng: 8.1301, name: "Otukpo Border East" },
//         timestamp: new Date(Date.now() - 600000),
//         description:
//           "Unauthorized border crossing detected. Multiple individuals attempting to bypass checkpoint.",
//         personnel: 6,
//         status: "active",
//       },
//     ];

//     setSensors(mockSensors);
//     setThreats(mockThreats);
//   }, []);

//   // WebSocket connection simulation
//   useEffect(() => {
//     const connectWebSocket = () => {
//       setConnectionStatus("reconnecting");

//       // Simulate WebSocket connection
//       setTimeout(() => {
//         setConnectionStatus("connected");

//         // Simulate real-time updates
//         const interval = setInterval(() => {
//           const now = new Date();

//           // Update sensor data
//           setSensors((prev) =>
//             prev.map((sensor) => ({
//               ...sensor,
//               lastUpdate: now,
//               batteryLevel: Math.max(
//                 20,
//                 sensor.batteryLevel - Math.random() * 0.5
//               ),
//             }))
//           );

//           // Occasionally add new threats
//           if (Math.random() < 0.1) {
//             const newThreat = {
//               id: `T${Date.now()}`,
//               sensorId:
//                 sensors[Math.floor(Math.random() * sensors.length)]?.id ||
//                 "S001",
//               type: [
//                 "intrusion",
//                 "suspicious_activity",
//                 "armed_group",
//                 "vehicle_movement",
//               ][Math.floor(Math.random() * 4)],
//               severity: ["low", "medium", "high", "critical"][
//                 Math.floor(Math.random() * 4)
//               ],
//               location: {
//                 lat: 7 + Math.random(),
//                 lng: 8 + Math.random(),
//                 name: "New Location",
//               },
//               timestamp: now,
//               description:
//                 "New threat detected by automated surveillance system.",
//               personnel: Math.floor(Math.random() * 15) + 1,
//               status: "active",
//             };

//             setThreats((prev) => [newThreat, ...prev.slice(0, 9)]);

//             // Play alert sound for critical threats
//             if (
//               newThreat.severity === "critical" &&
//               soundEnabled &&
//               audioRef.current
//             ) {
//               audioRef.current
//                 .play()
//                 .catch((e) => console.log("Audio play failed:", e));
//             }
//           }
//         }, 5000);

//         return () => {
//           clearInterval(interval);
//         };
//       }, 1000);
//     };

//     connectWebSocket();
//   }, [sensors, soundEnabled]);

//   interface SeverityColorMap {
//     [key: string]: string;
//   }

//   const getSeverityColor = (severity: keyof SeverityColorMap): string => {
//     switch (severity) {
//       case "critical":
//         return "bg-red-800 text-white";
//       case "high":
//         return "bg-red-500 text-white";
//       case "medium":
//         return "bg-yellow-500 text-white";
//       case "low":
//         return "bg-green-500 text-white";
//       default:
//         return "bg-gray-500 text-white";
//     }
//   };

//   interface StatusColorMap {
//     [key: string]: string;
//   }

//   type SensorStatus = "active" | "inactive" | "alert";

//   const getStatusColor = (status: SensorStatus): string => {
//     const colorMap: StatusColorMap = {
//       active: "text-green-400",
//       inactive: "text-red-400",
//       alert: "text-orange-400",
//     };
//     return colorMap[status] ?? "text-gray-400";
//   };

//   const activeCriticalThreats = threats.filter(
//     (t) => t.severity === "critical" && t.status === "active"
//   );

//   return (
//     <div className="min-h-screen bg-slate-900 text-white">
//       {/* Audio element for alerts */}
//       <audio ref={audioRef} preload="auto">
//         <source
//           src="data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmYdAkWRzO+8bSMELH7I79+STApSou7gylUfBhNztu/7uWsFLXjK7dyGOhgWSa/q2qBNCAhxue7/ol4GFWq37LiALgcVdMvq7rliFQZGoOs1t2QNCW+z6v5vKwgacaTt8LpgByl6yO1yMxYNUrHq87RsDBR4p+n5oVIGDW6y69x7NIYOUbLqzZA6BQ93s/Psp1MDBnSo5NqBOAYVaqTp67VhBSp8xs+GNwgSb7Ps6bVhBChxw++wYBoGIneqw/K8YhQFLXvK5dB7MgwPcqHq5q5WEQNZ0n7N50QdCk1pSKq9aUdBgT1nTh2JDQxhsjN7Y"
//           type="audio/wav"
//         />
//       </audio>

//       {/* Header */}
//       <div className="bg-slate-800 border-b border-slate-700 px-6 py-4">
//         <div className="flex items-center justify-between">
//           <div className="flex items-center space-x-4">
//             <Shield className="w-8 h-8 text-blue-400" />
//             <div>
//               <h1 className="text-2xl font-bold">
//                 Benue State Border Surveillance
//               </h1>
//               <p className="text-slate-400">
//                 Border Security & Threat Monitoring
//               </p>
//             </div>
//           </div>

//           <div className="flex items-center space-x-4">
//             <div className="flex items-center space-x-2">
//               <div
//                 className={`w-3 h-3 rounded-full ${
//                   connectionStatus === "connected"
//                     ? "bg-green-400 animate-pulse"
//                     : "bg-red-400"
//                 }`}
//               />
//               <span className="text-sm text-slate-400 capitalize">
//                 {connectionStatus}
//               </span>
//             </div>

//             <button
//               onClick={() => setSoundEnabled(!soundEnabled)}
//               className={`p-2 rounded-lg ${
//                 soundEnabled
//                   ? "bg-blue-600 text-white"
//                   : "bg-slate-600 text-slate-300"
//               }`}
//             >
//               {soundEnabled ? (
//                 <Volume2 className="w-5 h-5" />
//               ) : (
//                 <VolumeX className="w-5 h-5" />
//               )}
//             </button>

//             <div className="text-right">
//               <div className="text-sm font-medium">
//                 {new Date().toLocaleTimeString()}
//               </div>
//               <div className="text-xs text-slate-400">
//                 {new Date().toLocaleDateString()}
//               </div>
//             </div>
//           </div>
//         </div>
//       </div>

//       {/* Critical Alert Banner */}
//       {activeCriticalThreats.length > 0 && (
//         <Alert variant="destructive" className="px-6 py-3 animate-pulse">
//           <AlertTriangle className="h-4 w-4" />
//           <AlertDescription>
//             <div className="flex items-center space-x-2">
//               <span className="font-semibold">
//                 CRITICAL ALERT: {activeCriticalThreats.length} active critical
//                 threat{activeCriticalThreats.length > 1 ? "s" : ""} detected
//               </span>
//               <Bell className="w-5 h-5 animate-bounce" />
//             </div>
//           </AlertDescription>
//         </Alert>
//       )}

//       <div className="flex flex-1">
//         {/* Main Content */}
//         <div className="flex-1 p-6">
//           <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
//             {/* Statistics Cards */}
//             <div className="bg-slate-800 rounded-lg p-4">
//               <div className="flex items-center justify-between">
//                 <div>
//                   <p className="text-slate-400 text-sm">Active Sensors</p>
//                   <p className="text-2xl font-bold text-green-400">
//                     {sensors.filter((s) => s.status === "active").length}
//                   </p>
//                 </div>
//                 <Activity className="w-8 h-8 text-green-400" />
//               </div>
//             </div>

//             <div className="bg-slate-800 rounded-lg p-4">
//               <div className="flex items-center justify-between">
//                 <div>
//                   <p className="text-slate-400 text-sm">Active Threats</p>
//                   <p className="text-2xl font-bold text-red-400">
//                     {threats.filter((t) => t.status === "active").length}
//                   </p>
//                 </div>
//                 <Target className="w-8 h-8 text-red-400" />
//               </div>
//             </div>

//             <div className="bg-slate-800 rounded-lg p-4">
//               <div className="flex items-center justify-between">
//                 <div>
//                   <p className="text-slate-400 text-sm">Personnel Deployed</p>
//                   <p className="text-2xl font-bold text-blue-400">
//                     {threats.reduce((sum, t) => sum + t.personnel, 0)}
//                   </p>
//                 </div>
//                 <Users className="w-8 h-8 text-blue-400" />
//               </div>
//             </div>
//           </div>

//           {/* Map Area */}
//           <div className="bg-slate-800 rounded-lg p-4 mb-6">
//             <div className="flex items-center justify-between mb-4">
//               <h2 className="text-lg font-semibold flex items-center space-x-2">
//                 <MapPin className="w-5 h-5" />
//                 <span>Benue State Border Map</span>
//               </h2>
//               <div className="flex space-x-4">
//                 <div className="flex items-center space-x-1 text-sm text-blue-400">
//                   <div className="w-3 h-3 bg-blue-400 rounded"></div>
//                   <span>Sensors</span>
//                 </div>
//                 <div className="flex items-center space-x-1 text-sm text-red-400">
//                   <div className="w-3 h-3 bg-red-400 rounded-full"></div>
//                   <span>Threats</span>
//                 </div>
//                 <div className="flex items-center space-x-1 text-sm text-purple-400">
//                   <Eye className="w-3 h-3" />
//                   <span>Surveillance</span>
//                 </div>
//               </div>
//             </div>

//             <div className="rounded-lg h-[90vh]">
//               <MapContainer
//                 center={[7.4, 8.6]}
//                 zoom={8}
//                 style={{ height: "100%", width: "100%" }}
//               >
//                 <TileLayer
//                   attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
//                   url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
//                 />
//                 {/* Benue State Border */}
//                 {/* Benue State GeoJSON Boundary */}
//                 <GeoJSON
//                   data={benueBoundaryData as FeatureCollection}
//                   style={() => ({
//                     color: "blue",
//                     weight: 2,
//                     fillOpacity: 0.2,
//                     fillColor: "blue",
//                   })}
//                 />

//                 {/* Sensors */}
//                 {sensors.map((sensor) => (
//                   <Marker position={[sensor.lat, sensor.lng]} key={sensor.id}>
//                     <Popup>
//                       {sensor.name}
//                       <br />
//                       Status: {sensor.status}
//                       <br />
//                       Battery: {sensor.batteryLevel}%
//                     </Popup>
//                   </Marker>
//                 ))}
//                 {threats
//                   .filter((t) => t.status === "active")
//                   .map((threat) => (
//                     <Circle
//                       key={threat.id}
//                       center={[threat.location.lat, threat.location.lng]}
//                       radius={1000}
//                       pathOptions={{
//                         color:
//                           threat.severity === "critical"
//                             ? "red"
//                             : threat.severity === "high"
//                             ? "orange"
//                             : threat.severity === "medium"
//                             ? "yellow"
//                             : "green",
//                         fillOpacity: 0.5,
//                       }}
//                       eventHandlers={{
//                         click: () => {
//                           setSelectedThreat(threat);
//                         },
//                       }}
//                     >
//                       <Popup>
//                         {threat.type.replace("_", " ").toUpperCase()}
//                         <br />
//                         {threat.description}
//                         <br />
//                         Severity: {threat.severity.toUpperCase()}
//                       </Popup>
//                     </Circle>
//                   ))}
//               </MapContainer>
//             </div>
//           </div>

//           {/* Video Feeds */}
//           <div className="bg-slate-800 rounded-lg p-4">
//             <h2 className="text-lg font-semibold mb-4 flex items-center space-x-2">
//               <Camera className="w-5 h-5" />
//               <span>Live Video Feeds</span>
//             </h2>
//             <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
//               {sensors.slice(0, 6).map((sensor) => (
//                 <div key={sensor.id} className="bg-slate-700 rounded-lg p-3">
//                   <div className="bg-black rounded aspect-video mb-2 flex items-center justify-center">
//                     <div className="text-slate-400 text-center">
//                       <Camera className="w-8 h-8 mx-auto mb-2" />
//                       <div className="text-xs">Camera {sensor.id}</div>
//                       <div className="text-xs">{sensor.name}</div>
//                     </div>
//                   </div>
//                   <div className="flex justify-between items-center text-xs">
//                     <span
//                       className={getStatusColor(sensor.status as SensorStatus)}
//                     >
//                       {sensor.status}
//                     </span>
//                     <span className="text-slate-400">
//                       Battery: {sensor.batteryLevel}%
//                     </span>
//                   </div>
//                 </div>
//               ))}
//             </div>
//           </div>
//         </div>

//         {/* Sidebar - Threat List */}
//         <div className="w-80 bg-slate-800 border-l border-slate-700 p-4 overflow-y-auto">
//           <h2 className="text-lg font-semibold mb-4 flex items-center space-x-2">
//             <AlertTriangle className="w-5 h-5" />
//             <span>Active Threats</span>
//           </h2>

//           <div className="space-y-3">
//             {threats.map((threat) => (
//               <div
//                 key={threat.id}
//                 className={`bg-slate-700 rounded-lg p-3 cursor-pointer transition-colors
//                   ${
//                     selectedThreat?.id === threat.id
//                       ? "ring-2 ring-blue-400"
//                       : ""
//                   }
//                   hover:bg-slate-600`}
//                 onClick={() => setSelectedThreat(threat)}
//               >
//                 <div className="flex items-center justify-between mb-2">
//                   <span
//                     className={`px-2 py-1 rounded text-xs font-medium ${getSeverityColor(
//                       threat.severity
//                     )}`}
//                   >
//                     {threat.severity.toUpperCase()}
//                   </span>
//                   <div className="flex items-center space-x-1 text-xs text-slate-400">
//                     <Clock className="w-3 h-3" />
//                     <span>
//                       {new Date(threat.timestamp).toLocaleTimeString()}
//                     </span>
//                   </div>
//                 </div>

//                 <h3 className="font-medium mb-1">
//                   {threat.type.replace("_", " ").toUpperCase()}
//                 </h3>
//                 <p className="text-sm text-slate-300 mb-2">
//                   {threat.description}
//                 </p>

//                 <div className="flex items-center justify-between text-xs text-slate-400">
//                   <span className="flex items-center space-x-1">
//                     <MapPin className="w-3 h-3" />
//                     <span>{threat.location.name}</span>
//                   </span>
//                   <span className="flex items-center space-x-1">
//                     <Users className="w-3 h-3" />
//                     <span>{threat.personnel}</span>
//                   </span>
//                 </div>

//                 <div className="mt-2 flex space-x-2">
//                   <button className="px-2 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-500">
//                     Deploy
//                   </button>
//                   <button className="px-2 py-1 bg-gray-600 text-white text-xs rounded hover:bg-gray-500">
//                     Investigate
//                   </button>
//                 </div>
//               </div>
//             ))}
//           </div>

//           {/* Sensor Status */}
//           <div className="mt-6">
//             <h3 className="text-md font-semibold mb-3 flex items-center space-x-2">
//               <Zap className="w-4 h-4" />
//               <span>Sensor Status</span>
//             </h3>

//             <div className="space-y-2">
//               {sensors.map((sensor) => (
//                 <div key={sensor.id} className="bg-slate-700 rounded p-2">
//                   <div className="flex items-center justify-between mb-1">
//                     <span className="text-sm font-medium">{sensor.name}</span>
//                     <span
//                       className={`text-xs ${getStatusColor(
//                         sensor.status as SensorStatus
//                       )}`}
//                     >
//                       {sensor.status}
//                     </span>
//                   </div>
//                   <div className="flex items-center justify-between text-xs text-slate-400">
//                     <span>ID: {sensor.id}</span>
//                     <span>Battery: {sensor.batteryLevel.toFixed(1)}%</span>
//                   </div>
//                   <div className="w-full bg-slate-600 rounded-full h-1 mt-1">
//                     <div
//                       className="bg-green-400 h-1 rounded-full"
//                       style={{ width: `${sensor.batteryLevel}%` }}
//                     />
//                   </div>
//                 </div>
//               ))}
//             </div>
//           </div>
//         </div>
//       </div>

//       {/* Threat Detail Modal */}
//       {selectedThreat && (
//         <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
//           <div className="bg-slate-800 rounded-lg p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
//             <div className="flex items-center justify-between mb-4">
//               <h2 className="text-xl font-bold">Threat Details</h2>
//               <button
//                 onClick={() => setSelectedThreat(null)}
//                 className="text-slate-400 hover:text-white"
//               >
//                 ×
//               </button>
//             </div>

//             <div className="space-y-4">
//               <div className="grid grid-cols-2 gap-4">
//                 <div>
//                   <label className="text-sm text-slate-400">Threat ID</label>
//                   <p className="font-medium">{selectedThreat.id}</p>
//                 </div>
//                 <div>
//                   <label className="text-sm text-slate-400">Severity</label>
//                   <span
//                     className={`inline-block px-2 py-1 rounded text-sm font-medium ${getSeverityColor(
//                       selectedThreat.severity
//                     )}`}
//                   >
//                     {selectedThreat.severity.toUpperCase()}
//                   </span>
//                 </div>
//               </div>

//               <div>
//                 <label className="text-sm text-slate-400">Description</label>
//                 <p className="text-slate-200">{selectedThreat.description}</p>
//               </div>

//               <div className="grid grid-cols-2 gap-4">
//                 <div>
//                   <label className="text-sm text-slate-400">Location</label>
//                   <p className="font-medium">{selectedThreat.location.name}</p>
//                 </div>
//                 <div>
//                   <label className="text-sm text-slate-400">
//                     Personnel Deployed
//                   </label>
//                   <p className="font-medium">{selectedThreat.personnel}</p>
//                 </div>
//               </div>

//               <div>
//                 <label className="text-sm text-slate-400">Timestamp</label>
//                 <p className="font-medium">
//                   {selectedThreat.timestamp.toLocaleString()}
//                 </p>
//               </div>

//               <div className="flex space-x-3 mt-6">
//                 <button className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-500">
//                   Deploy Emergency Response
//                 </button>
//                 <button className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-500">
//                   Request Backup
//                 </button>
//                 <button className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-500">
//                   Mark Investigating
//                 </button>
//               </div>
//             </div>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default CommandCenter;


















// MODIFICATION OF THE ORIGINAL CODE GIVEN TO ME BY CLAUDE AI MODIFIED BY GROK
// import { useState, useEffect, useRef } from 'react';
// import {
//   AlertTriangle,
//   Shield,
//   MapPin,
//   Camera,
//   Users,
//   Clock,
//   Volume2,
//   VolumeX,
//   Eye,
//   Zap,
//   Target,
//   Bell,
//   Activity
// } from 'lucide-react';
// import { Alert, AlertDescription } from '@/components/ui/alert';
// import { MapContainer, TileLayer, Marker, Popup, Circle } from 'react-leaflet';
// import 'leaflet/dist/leaflet.css';

// interface Sensor {
//   id: string;
//   name: string;
//   lat: number;
//   lng: number;
//   status: 'active' | 'inactive' | 'alert';
//   lastUpdate: Date;
//   batteryLevel: number;
// }

// interface Threat {
//   id: string;
//   sensorId: string;
//   type: 'intrusion' | 'suspicious_activity' | 'armed_group' | 'vehicle_movement';
//   severity: 'low' | 'medium' | 'high' | 'critical';
//   location: { lat: number; lng: number; name: string };
//   timestamp: Date;
//   description: string;
//   personnel: number;
//   status: 'active' | 'investigating' | 'resolved';
// }

// const CommandCenter = () => {
//   const [sensors, setSensors] = useState<Sensor[]>([]);
//   const [threats, setThreats] = useState<Threat[]>([]);
//   const [selectedThreat, setSelectedThreat] = useState<Threat | null>(null);
//   const [soundEnabled, setSoundEnabled] = useState(true);
//   const [connectionStatus, setConnectionStatus] = useState<'connected' | 'disconnected' | 'reconnecting'>('disconnected');
//   const audioRef = useRef<HTMLAudioElement>(null);
//   const wsRef = useRef<WebSocket | null>(null);

//   // Mock data for demonstration
//   useEffect(() => {
//     const mockSensors: Sensor[] = [
//       { id: 'S001', name: 'Makurdi Border North', lat: 7.7319, lng: 8.5211, status: 'active', lastUpdate: new Date(), batteryLevel: 85 },
//       { id: 'S002', name: 'Gboko Checkpoint', lat: 7.3239, lng: 9.0043, status: 'alert', lastUpdate: new Date(), batteryLevel: 92 },
//       { id: 'S003', name: 'Otukpo Border East', lat: 7.1905, lng: 8.1301, status: 'active', lastUpdate: new Date(), batteryLevel: 78 },
//       { id: 'S004', name: 'Katsina-Ala West', lat: 7.1667, lng: 9.2833, status: 'inactive', lastUpdate: new Date(Date.now() - 300000), batteryLevel: 45 },
//       { id: 'S005', name: 'Vandeikya South', lat: 6.7833, lng: 9.0667, status: 'active', lastUpdate: new Date(), batteryLevel: 95 },
//     ];

//     const mockThreats: Threat[] = [
//       {
//         id: 'T001',
//         sensorId: 'S002',
//         type: 'armed_group',
//         severity: 'critical',
//         location: { lat: 7.3239, lng: 9.0043, name: 'Gboko Checkpoint' },
//         timestamp: new Date(Date.now() - 120000),
//         description: 'Armed group of 8-10 individuals detected approaching checkpoint. Heavy weapons visible.',
//         personnel: 10,
//         status: 'active'
//       },
//       {
//         id: 'T002',
//         sensorId: 'S001',
//         type: 'vehicle_movement',
//         severity: 'medium',
//         location: { lat: 7.7319, lng: 8.5211, name: 'Makurdi Border North' },
//         timestamp: new Date(Date.now() - 300000),
//         description: 'Convoy of 3 unmarked vehicles moving towards border crossing at unusual hour.',
//         personnel: 5,
//         status: 'investigating'
//       },
//       {
//         id: 'T003',
//         sensorId: 'S003',
//         type: 'intrusion',
//         severity: 'high',
//         location: { lat: 7.1905, lng: 8.1301, name: 'Otukpo Border East' },
//         timestamp: new Date(Date.now() - 600000),
//         description: 'Unauthorized border crossing detected. Multiple individuals attempting to bypass checkpoint.',
//         personnel: 6,
//         status: 'active'
//       }
//     ];

//     setSensors(mockSensors);
//     setThreats(mockThreats);
//   }, []);

//   // WebSocket connection simulation
//   useEffect(() => {
//     const connectWebSocket = () => {
//       setConnectionStatus('reconnecting');

//       // Simulate WebSocket connection
//             setTimeout(() => {
//               setConnectionStatus('connected');

//               // Simulate real-time updates
//               const interval = setInterval(() => {
//                 const now = new Date();

//                 // Update sensor data
//                 setSensors(prev => prev.map(sensor => ({
//                   ...sensor,
//                   lastUpdate: now,
//                   batteryLevel: Math.max(20, sensor.batteryLevel - Math.random() * 0.5)
//                 })));

//                 // Occasionally add new threats
//                 if (Math.random() < 0.1) {
//                   const newThreat: Threat = {
//                     id: `T${Date.now()}`,
//                     sensorId: sensors[Math.floor(Math.random() * sensors.length)]?.id || 'S001',
//                     type: ['intrusion', 'suspicious_activity', 'armed_group', 'vehicle_movement'][Math.floor(Math.random() * 4)] as Threat['type'],
//                     severity: ['low', 'medium', 'high', 'critical'][Math.floor(Math.random() * 4)] as Threat['severity'],
//                     location: { lat: 7 + Math.random(), lng: 8 + Math.random(), name: 'New Location' },
//                     timestamp: now,
//                     description: 'New threat detected by automated surveillance system.',
//                     personnel: Math.floor(Math.random() * 15) + 1,
//                     status: 'active'
//                   };

//                   setThreats(prev => [newThreat, ...prev.slice(0, 9)]);

//                   // Play alert sound for critical threats
//                   if (newThreat.severity === 'critical' && soundEnabled && audioRef.current) {
//                     audioRef.current.play().catch(e => console.log('Audio play failed:', e));
//                   }
//                 }
//               }, 5000);

//               return () => {
//                 clearInterval(interval);
//               };
//             }, 1000);
//     };

//     connectWebSocket();
//   }, [sensors, soundEnabled]);

// interface SeverityColorMap {
//     [key: string]: string;
// }

// const getSeverityColor = (severity: keyof SeverityColorMap): string => {
//     const colorMap: SeverityColorMap = {
//         critical: 'bg-red-600 text-white',
//         high: 'bg-red-500 text-white',
//         medium: 'bg-yellow-500 text-white',
//         low: 'bg-green-500 text-white',
//     };
//     return colorMap[severity] ?? 'bg-gray-500 text-white';
// };

// interface StatusColorMap {
//     [key: string]: string;
// }

// type SensorStatus = 'active' | 'inactive' | 'alert';

// const getStatusColor = (status: SensorStatus): string => {
//     const colorMap: StatusColorMap = {
//         active: 'text-green-400',
//         inactive: 'text-red-400',
//         alert: 'text-orange-400',
//     };
//     return colorMap[status] ?? 'text-gray-400';
// };

//   const activeCriticalThreats = threats.filter(t => t.severity === 'critical' && t.status === 'active');

//   return (
//     <div className="min-h-screen bg-slate-900 text-white">
//       {/* Audio element for alerts */}
//       <audio ref={audioRef} preload="auto">
//         <source src="data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmYdAkWRzO+8bSMELH7I79+STApSou7gylUfBhNztu/7uWsFLXjK7dyGOhgWSa/q2qBNCAhxue7/ol4GFWq37LiALgcVdMvq7rliFQZGoOs1t2QNCW+z6v5vKwgacaTt8LpgByl6yO1yMxYNUrHq87RsDBR4p+n5oVIGDW6y69x7NIYOUbLqzZA6BQ93s/Psp1MDBnSo5NqBOAYVaqTp67VhBSp8xs+GNwgSb7Ps6bVhBChxw++wYBoGIneqw/K8YhQFLXvK5dB7MgwPcqHq5q5WEQNZ0n7N50QdCk1pSKq9aUdBgT1nTh2JDQxhsjN7Y" type="audio/wav" />
//       </audio>

//       {/* Header */}
//       <div className="bg-slate-800 border-b border-slate-700 px-6 py-4">
//         <div className="flex items-center justify-between">
//           <div className="flex items-center space-x-4">
//             <Shield className="w-8 h-8 text-blue-400" />
//             <div>
//               <h1 className="text-2xl font-bold">Benue State Command Center</h1>
//               <p className="text-slate-400">Border Security & Threat Monitoring</p>
//             </div>
//           </div>

//           <div className="flex items-center space-x-4">
//             <div className="flex items-center space-x-2">
//               <div className={`w-3 h-3 rounded-full ${connectionStatus === 'connected' ? 'bg-green-400 animate-pulse' : 'bg-red-400'}`} />
//               <span className="text-sm text-slate-400 capitalize">{connectionStatus}</span>
//             </div>

//             <button
//               onClick={() => setSoundEnabled(!soundEnabled)}
//               className={`p-2 rounded-lg ${soundEnabled ? 'bg-blue-600 text-white' : 'bg-slate-600 text-slate-300'}`}
//             >
//               {soundEnabled ? <Volume2 className="w-5 h-5" /> : <VolumeX className="w-5 h-5" />}
//             </button>

//             <div className="text-right">
//               <div className="text-sm font-medium">{new Date().toLocaleTimeString()}</div>
//               <div className="text-xs text-slate-400">{new Date().toLocaleDateString()}</div>
//             </div>
//           </div>
//         </div>
//       </div>

//       {/* Critical Alert Banner */}
//       {activeCriticalThreats.length > 0 && (
//         <Alert variant="destructive" className="px-6 py-3 animate-pulse">
//           <AlertTriangle className="h-4 w-4" />
//           <AlertDescription>
//             <div className="flex items-center space-x-2">
//               <span className="font-semibold">
//                 CRITICAL ALERT: {activeCriticalThreats.length} active critical threat{activeCriticalThreats.length > 1 ? 's' : ''} detected
//               </span>
//               <Bell className="w-5 h-5 animate-bounce" />
//             </div>
//           </AlertDescription>
//         </Alert>
//       )}

//       <div className="flex flex-1">
//         {/* Main Content */}
//         <div className="flex-1 p-6">
//           <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
//             {/* Statistics Cards */}
//             <div className="bg-slate-800 rounded-lg p-4">
//               <div className="flex items-center justify-between">
//                 <div>
//                   <p className="text-slate-400 text-sm">Active Sensors</p>
//                   <p className="text-2xl font-bold text-green-400">
//                     {sensors.filter(s => s.status === 'active').length}
//                   </p>
//                 </div>
//                 <Activity className="w-8 h-8 text-green-400" />
//               </div>
//             </div>

//             <div className="bg-slate-800 rounded-lg p-4">
//               <div className="flex items-center justify-between">
//                 <div>
//                   <p className="text-slate-400 text-sm">Active Threats</p>
//                   <p className="text-2xl font-bold text-red-400">
//                     {threats.filter(t => t.status === 'active').length}
//                   </p>
//                 </div>
//                 <Target className="w-8 h-8 text-red-400" />
//               </div>
//             </div>

//             <div className="bg-slate-800 rounded-lg p-4">
//               <div className="flex items-center justify-between">
//                 <div>
//                   <p className="text-slate-400 text-sm">Personnel Deployed</p>
//                   <p className="text-2xl font-bold text-blue-400">
//                     {threats.reduce((sum, t) => sum + t.personnel, 0)}
//                   </p>
//                 </div>
//                 <Users className="w-8 h-8 text-blue-400" />
//               </div>
//             </div>
//           </div>

//           {/* Map Area */}
//           <div className="bg-slate-800 rounded-lg p-4 mb-6">
//             <div className="flex items-center justify-between mb-4">
//               <h2 className="text-lg font-semibold flex items-center space-x-2">
//                 <MapPin className="w-5 h-5" />
//                 <span>Benue State Border Map</span>
//               </h2>
//               <div className="flex space-x-4">
//                 <div className="flex items-center space-x-1 text-sm text-blue-400">
//                   <div className="w-3 h-3 bg-blue-400 rounded"></div>
//                   <span>Sensors</span>
//                 </div>
//                 <div className="flex items-center space-x-1 text-sm text-red-400">
//                   <div className="w-3 h-3 bg-red-400 rounded-full"></div>
//                   <span>Threats</span>
//                 </div>
//                 <div className="flex items-center space-x-1 text-sm text-purple-400">
//                   <Eye className="w-3 h-3" />
//                   <span>Surveillance</span>
//                 </div>
//               </div>
//             </div>

//             <div className="rounded-lg h-96">
//               <MapContainer center={[7.4, 8.6]} zoom={8} style={{ height: '100%', width: '100%' }}>
//                 <TileLayer
//                   attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
//                   url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
//                 />
//                 {sensors.map((sensor) => (
//                   <Marker position={[sensor.lat, sensor.lng]} key={sensor.id}>
//                     <Popup>
//                       {sensor.name}<br />Status: {sensor.status}<br />Battery: {sensor.batteryLevel}%
//                     </Popup>
//                   </Marker>
//                 ))}
//                 {threats.filter(t => t.status === 'active').map((threat) => (
//                   <Circle
//                     key={threat.id}
//                     center={[threat.location.lat, threat.location.lng]}
//                     radius={1000}
//                     pathOptions={{
//                       color: threat.severity === 'critical' ? 'red' : threat.severity === 'high' ? 'orange' : threat.severity === 'medium' ? 'yellow' : 'green',
//                       fillOpacity: 0.5
//                     }}
//                     eventHandlers={{
//                       click: () => {
//                         setSelectedThreat(threat);
//                       }
//                     }}
//                   >
//                     <Popup>
//                       {threat.type.replace('_', ' ').toUpperCase()}<br />
//                       {threat.description}<br />
//                       Severity: {threat.severity.toUpperCase()}
//                     </Popup>
//                   </Circle>
//                 ))}
//               </MapContainer>
//             </div>
//           </div>

//           {/* Video Feeds */}
//           <div className="bg-slate-800 rounded-lg p-4">
//             <h2 className="text-lg font-semibold mb-4 flex items-center space-x-2">
//               <Camera className="w-5 h-5" />
//               <span>Live Video Feeds</span>
//             </h2>
//             <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
//               {sensors.slice(0, 6).map((sensor) => (
//                 <div key={sensor.id} className="bg-slate-700 rounded-lg p-3">
//                   <div className="bg-black rounded aspect-video mb-2 flex items-center justify-center">
//                     <div className="text-slate-400 text-center">
//                       <Camera className="w-8 h-8 mx-auto mb-2" />
//                       <div className="text-xs">Camera {sensor.id}</div>
//                       <div className="text-xs">{sensor.name}</div>
//                     </div>
//                   </div>
//                   <div className="flex justify-between items-center text-xs">
//                     <span className={getStatusColor(sensor.status)}>{sensor.status}</span>
//                     <span className="text-slate-400">Battery: {sensor.batteryLevel}%</span>
//                   </div>
//                 </div>
//               ))}
//             </div>
//           </div>
//         </div>

//         {/* Sidebar - Threat List */}
//         <div className="w-80 bg-slate-800 border-l border-slate-700 p-4 overflow-y-auto">
//           <h2 className="text-lg font-semibold mb-4 flex items-center space-x-2">
//             <AlertTriangle className="w-5 h-5" />
//             <span>Active Threats</span>
//           </h2>

//           <div className="space-y-3">
//             {threats.map((threat) => (
//               <div
//                 key={threat.id}
//                 className={`bg-slate-700 rounded-lg p-3 cursor-pointer transition-colors
//                   ${selectedThreat?.id === threat.id ? 'ring-2 ring-blue-400' : ''}
//                   hover:bg-slate-600`}
//                 onClick={() => setSelectedThreat(threat)}
//               >
//                 <div className="flex items-center justify-between mb-2">
//                   <span className={`px-2 py-1 rounded text-xs font-medium ${getSeverityColor(threat.severity)}`}>
//                     {threat.severity.toUpperCase()}
//                   </span>
//                   <div className="flex items-center space-x-1 text-xs text-slate-400">
//                     <Clock className="w-3 h-3" />
//                     <span>{new Date(threat.timestamp).toLocaleTimeString()}</span>
//                   </div>
//                 </div>

//                 <h3 className="font-medium mb-1">{threat.type.replace('_', ' ').toUpperCase()}</h3>
//                 <p className="text-sm text-slate-300 mb-2">{threat.description}</p>

//                 <div className="flex items-center justify-between text-xs text-slate-400">
//                   <span className="flex items-center space-x-1">
//                     <MapPin className="w-3 h-3" />
//                     <span>{threat.location.name}</span>
//                   </span>
//                   <span className="flex items-center space-x-1">
//                     <Users className="w-3 h-3" />
//                     <span>{threat.personnel}</span>
//                   </span>
//                 </div>

//                 <div className="mt-2 flex space-x-2">
//                   <button className="px-2 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-500">
//                     Deploy
//                   </button>
//                   <button className="px-2 py-1 bg-gray-600 text-white text-xs rounded hover:bg-gray-500">
//                     Investigate
//                   </button>
//                 </div>
//               </div>
//             ))}
//           </div>

//           {/* Sensor Status */}
//           <div className="mt-6">
//             <h3 className="text-md font-semibold mb-3 flex items-center space-x-2">
//               <Zap className="w-4 h-4" />
//               <span>Sensor Status</span>
//             </h3>

//             <div className="space-y-2">
//               {sensors.map((sensor) => (
//                 <div key={sensor.id} className="bg-slate-700 rounded p-2">
//                   <div className="flex items-center justify-between mb-1">
//                     <span className="text-sm font-medium">{sensor.name}</span>
//                     <span className={`text-xs ${getStatusColor(sensor.status)}`}>
//                       {sensor.status}
//                     </span>
//                   </div>
//                   <div className="flex items-center justify-between text-xs text-slate-400">
//                     <span>ID: {sensor.id}</span>
//                     <span>Battery: {sensor.batteryLevel.toFixed(1)}%</span>
//                   </div>
//                   <div className="w-full bg-slate-600 rounded-full h-1 mt-1">
//                     <div
//                       className="bg-green-400 h-1 rounded-full"
//                       style={{ width: `${sensor.batteryLevel}%` }}
//                     />
//                   </div>
//                 </div>
//               ))}
//             </div>
//           </div>
//         </div>
//       </div>

//       {/* Threat Detail Modal */}
//       {selectedThreat && (
//         <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
//           <div className="bg-slate-800 rounded-lg p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
//             <div className="flex items-center justify-between mb-4">
//               <h2 className="text-xl font-bold">Threat Details</h2>
//               <button
//                 onClick={() => setSelectedThreat(null)}
//                 className="text-slate-400 hover:text-white"
//               >
//                 ×
//               </button>
//             </div>

//             <div className="space-y-4">
//               <div className="grid grid-cols-2 gap-4">
//                 <div>
//                   <label className="text-sm text-slate-400">Threat ID</label>
//                   <p className="font-medium">{selectedThreat.id}</p>
//                 </div>
//                 <div>
//                   <label className="text-sm text-slate-400">Severity</label>
//                   <span className={`inline-block px-2 py-1 rounded text-sm font-medium ${getSeverityColor(selectedThreat.severity)}`}>
//                     {selectedThreat.severity.toUpperCase()}
//                   </span>
//                 </div>
//               </div>

//               <div>
//                 <label className="text-sm text-slate-400">Description</label>
//                 <p className="text-slate-200">{selectedThreat.description}</p>
//               </div>

//               <div className="grid grid-cols-2 gap-4">
//                 <div>
//                   <label className="text-sm text-slate-400">Location</label>
//                   <p className="font-medium">{selectedThreat.location.name}</p>
//                 </div>
//                 <div>
//                   <label className="text-sm text-slate-400">Personnel Deployed</label>
//                   <p className="font-medium">{selectedThreat.personnel}</p>
//                 </div>
//               </div>

//               <div>
//                 <label className="text-sm text-slate-400">Timestamp</label>
//                 <p className="font-medium">{selectedThreat.timestamp.toLocaleString()}</p>
//               </div>

//               <div className="flex space-x-3 mt-6">
//                 <button className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-500">
//                   Deploy Emergency Response
//                 </button>
//                 <button className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-500">
//                   Request Backup
//                 </button>
//                 <button className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-500">
//                   Mark Investigating
//                 </button>
//               </div>
//             </div>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default CommandCenter;

// THE ORIGINAL CODE GIVEN TO ME BY CLAUDE AI
// import { useState, useEffect, useRef } from 'react';
// import {
//   AlertTriangle,
//   Shield,
//   MapPin,
//   Camera,
//   Users,
//   Clock,
//   Volume2,
//   VolumeX,
//   Eye,
//   Zap,
//   Target,
//   Bell,
//   Activity
// } from 'lucide-react';
// import { Alert, AlertDescription } from '@/components/ui/alert';

// interface Sensor {
//   id: string;
//   name: string;
//   lat: number;
//   lng: number;
//   status: 'active' | 'inactive' | 'alert';
//   lastUpdate: Date;
//   batteryLevel: number;
// }

// interface Threat {
//   id: string;
//   sensorId: string;
//   type: 'intrusion' | 'suspicious_activity' | 'armed_group' | 'vehicle_movement';
//   severity: 'low' | 'medium' | 'high' | 'critical';
//   location: { lat: number; lng: number; name: string };
//   timestamp: Date;
//   description: string;
//   videoFeed?: string;
//   personnel: number;
//   status: 'active' | 'investigating' | 'resolved';
// }

// const CommandCenter = () => {
//   const [sensors, setSensors] = useState<Sensor[]>([]);
//   const [threats, setThreats] = useState<Threat[]>([]);
//   const [selectedThreat, setSelectedThreat] = useState<Threat | null>(null);
//   const [soundEnabled, setSoundEnabled] = useState(true);
//   const [connectionStatus, setConnectionStatus] = useState<'connected' | 'disconnected' | 'reconnecting'>('disconnected');
//   const audioRef = useRef<HTMLAudioElement>(null);
//   const wsRef = useRef<WebSocket | null>(null);

//   // Mock data for demonstration
//   useEffect(() => {
//     const mockSensors: Sensor[] = [
//       { id: 'S001', name: 'Makurdi Border North', lat: 7.7319, lng: 8.5211, status: 'active', lastUpdate: new Date(), batteryLevel: 85 },
//       { id: 'S002', name: 'Gboko Checkpoint', lat: 7.3239, lng: 9.0043, status: 'alert', lastUpdate: new Date(), batteryLevel: 92 },
//       { id: 'S003', name: 'Otukpo Border East', lat: 7.1905, lng: 8.1301, status: 'active', lastUpdate: new Date(), batteryLevel: 78 },
//       { id: 'S004', name: 'Katsina-Ala West', lat: 7.1667, lng: 9.2833, status: 'inactive', lastUpdate: new Date(Date.now() - 300000), batteryLevel: 45 },
//       { id: 'S005', name: 'Vandeikya South', lat: 6.7833, lng: 9.0667, status: 'active', lastUpdate: new Date(), batteryLevel: 95 },
//     ];

//     const mockThreats: Threat[] = [
//       {
//         id: 'T001',
//         sensorId: 'S002',
//         type: 'armed_group',
//         severity: 'critical',
//         location: { lat: 7.3239, lng: 9.0043, name: 'Gboko Checkpoint' },
//         timestamp: new Date(Date.now() - 120000),
//         description: 'Armed group of 8-10 individuals detected approaching checkpoint. Heavy weapons visible.',
//         personnel: 10,
//         status: 'active'
//       },
//       {
//         id: 'T002',
//         sensorId: 'S001',
//         type: 'vehicle_movement',
//         severity: 'medium',
//         location: { lat: 7.7319, lng: 8.5211, name: 'Makurdi Border North' },
//         timestamp: new Date(Date.now() - 300000),
//         description: 'Convoy of 3 unmarked vehicles moving towards border crossing at unusual hour.',
//         personnel: 5,
//         status: 'investigating'
//       },
//       {
//         id: 'T003',
//         sensorId: 'S003',
//         type: 'intrusion',
//         severity: 'high',
//         location: { lat: 7.1905, lng: 8.1301, name: 'Otukpo Border East' },
//         timestamp: new Date(Date.now() - 600000),
//         description: 'Unauthorized border crossing detected. Multiple individuals attempting to bypass checkpoint.',
//         personnel: 6,
//         status: 'active'
//       }
//     ];

//     setSensors(mockSensors);
//     setThreats(mockThreats);
//   }, []);

//   // WebSocket connection simulation
//   useEffect(() => {
//     const connectWebSocket = () => {
//       setConnectionStatus('reconnecting');

//       // Simulate WebSocket connection
//       setTimeout(() => {
//         setConnectionStatus('connected');

//         // Simulate real-time updates
//         const interval = setInterval(() => {
//           const now = new Date();

//           // Update sensor data
//           setSensors(prev => prev.map(sensor => ({
//             ...sensor,
//             lastUpdate: now,
//             batteryLevel: Math.max(20, sensor.batteryLevel - Math.random() * 0.5)
//           })));

//           // Occasionally add new threats
//           if (Math.random() < 0.1) {
//             const newThreat: Threat = {
//               id: `T${Date.now()}`,
//               sensorId: sensors[Math.floor(Math.random() * sensors.length)]?.id || 'S001',
//               type: ['intrusion', 'suspicious_activity', 'armed_group', 'vehicle_movement'][Math.floor(Math.random() * 4)] as Threat['type'],
//               severity: ['low', 'medium', 'high', 'critical'][Math.floor(Math.random() * 4)] as Threat["severity"],
//               location: { lat: 7 + Math.random(), lng: 8 + Math.random(), name: 'New Location' },
//               timestamp: now,
//               description: 'New threat detected by automated surveillance system.',
//               personnel: Math.floor(Math.random() * 15) + 1,
//               status: 'active'
//             };

//             setThreats(prev => [newThreat, ...prev.slice(0, 9)]);

//             // Play alert sound for critical threats
//             if (newThreat.severity === 'critical' && soundEnabled && audioRef.current) {
//               audioRef.current.play().catch(e => console.log('Audio play failed:', e));
//             }
//           }
//         }, 5000);

//         return () => clearInterval(interval);
//       }, 1000);
//     };

//     connectWebSocket();
//   }, [sensors, soundEnabled]);

//   const getSeverityColor = (severity: string) => {
//     switch (severity) {
//       case 'critical': return 'bg-red-600 text-white';
//       case 'high': return 'bg-red-500 text-white';
//       case 'medium': return 'bg-yellow-500 text-white';
//       case 'low': return 'bg-green-500 text-white';
//       default: return 'bg-gray-500 text-white';
//     }
//   };

//   const getStatusColor = (status: string) => {
//     switch (status) {
//       case 'active': return 'text-green-400';
//       case 'inactive': return 'text-red-400';
//       case 'alert': return 'text-orange-400';
//       default: return 'text-gray-400';
//     }
//   };

//   const activeCriticalThreats = threats.filter(t => t.severity === 'critical' && t.status === 'active');

//   return (
//     <div className="min-h-screen bg-slate-900 text-white">
//       {/* Audio element for alerts */}
//       <audio ref={audioRef} preload="auto">
//         <source src="data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmYdAkWRzO+8bSMELH7I79+STApSou7gylUfBhNztu/7uWsFLXjK7dyGOhgWSa/q2qBNCAhxue7/ol4GFWq37LiALgcVdMvq7rliFQZGoOs1t2QNCW+z6v5vKwgacaTt8LpgByl6yO1yMxYNUrHq87RsDBR4p+n5oVIGDW6y69x7NIYOUbLqzZA6BQ93s/Psp1MDBnSo5NqBOAYVaqTp67VhBSp8xs+GNwgSb7Ps6bVhBChxw++wYBoGIneqw/K8YhQFLXvK5dB7MgwPcqHq5q5WEQNZ0n7N50QdCk1pSKq9aUdBgT1nTh2JDQxhsjN7Y" type="audio/wav" />
//       </audio>

//       {/* Header */}
//       <div className="bg-slate-800 border-b border-slate-700 px-6 py-4">
//         <div className="flex items-center justify-between">
//           <div className="flex items-center space-x-4">
//             <Shield className="w-8 h-8 text-blue-400" />
//             <div>
//               <h1 className="text-2xl font-bold">Benue State Command Center</h1>
//               <p className="text-slate-400">Border Security & Threat Monitoring</p>
//             </div>
//           </div>

//           <div className="flex items-center space-x-4">
//             <div className="flex items-center space-x-2">
//               <div className={`w-3 h-3 rounded-full ${connectionStatus === 'connected' ? 'bg-green-400 animate-pulse' : 'bg-red-400'}`} />
//               <span className="text-sm text-slate-400 capitalize">{connectionStatus}</span>
//             </div>

//             <button
//               onClick={() => setSoundEnabled(!soundEnabled)}
//               className={`p-2 rounded-lg ${soundEnabled ? 'bg-blue-600 text-white' : 'bg-slate-600 text-slate-300'}`}
//             >
//               {soundEnabled ? <Volume2 className="w-5 h-5" /> : <VolumeX className="w-5 h-5" />}
//             </button>

//             <div className="text-right">
//               <div className="text-sm font-medium">{new Date().toLocaleTimeString()}</div>
//               <div className="text-xs text-slate-400">{new Date().toLocaleDateString()}</div>
//             </div>
//           </div>
//         </div>
//       </div>

//       {/* Critical Alert Banner */}
//       {activeCriticalThreats.length > 0 && (
//         <div className="bg-red-600 text-white px-6 py-3 animate-pulse">
//           <div className="flex items-center space-x-2">
//             <AlertTriangle className="w-5 h-5" />
//             <span className="font-semibold">
//               CRITICAL ALERT: {activeCriticalThreats.length} active critical threat{activeCriticalThreats.length > 1 ? 's' : ''} detected
//             </span>
//             <Bell className="w-5 h-5 animate-bounce" />
//           </div>
//         </div>
//       )}

//       <div className="flex flex-1">
//         {/* Main Content */}
//         <div className="flex-1 p-6">
//           <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
//             {/* Statistics Cards */}
//             <div className="bg-slate-800 rounded-lg p-4">
//               <div className="flex items-center justify-between">
//                 <div>
//                   <p className="text-slate-400 text-sm">Active Sensors</p>
//                   <p className="text-2xl font-bold text-green-400">
//                     {sensors.filter(s => s.status === 'active').length}
//                   </p>
//                 </div>
//                 <Activity className="w-8 h-8 text-green-400" />
//               </div>
//             </div>

//             <div className="bg-slate-800 rounded-lg p-4">
//               <div className="flex items-center justify-between">
//                 <div>
//                   <p className="text-slate-400 text-sm">Active Threats</p>
//                   <p className="text-2xl font-bold text-red-400">
//                     {threats.filter(t => t.status === 'active').length}
//                   </p>
//                 </div>
//                 <Target className="w-8 h-8 text-red-400" />
//               </div>
//             </div>

//             <div className="bg-slate-800 rounded-lg p-4">
//               <div className="flex items-center justify-between">
//                 <div>
//                   <p className="text-slate-400 text-sm">Personnel Deployed</p>
//                   <p className="text-2xl font-bold text-blue-400">
//                     {threats.reduce((sum, t) => sum + t.personnel, 0)}
//                   </p>
//                 </div>
//                 <Users className="w-8 h-8 text-blue-400" />
//               </div>
//             </div>
//           </div>

//           {/* Map Area */}
//           <div className="bg-slate-800 rounded-lg p-4 mb-6">
//             <div className="flex items-center justify-between mb-4">
//               <h2 className="text-lg font-semibold flex items-center space-x-2">
//                 <MapPin className="w-5 h-5" />
//                 <span>Benue State Border Map</span>
//               </h2>
//               <div className="flex space-x-2">
//                 <div className="flex items-center space-x-1 text-sm text-green-400">
//                   <div className="w-3 h-3 bg-green-400 rounded-full"></div>
//                   <span>Active</span>
//                 </div>
//                 <div className="flex items-center space-x-1 text-sm text-red-400">
//                   <div className="w-3 h-3 bg-red-400 rounded-full"></div>
//                   <span>Threats</span>
//                 </div>
//               </div>
//             </div>

//             <div className="bg-slate-700 rounded-lg h-96 relative overflow-hidden">
//               {/* Simulated Map */}
//               <div className="absolute inset-0 bg-gradient-to-br from-slate-600 to-slate-800">
//                 <div className="absolute inset-4">
//                   {/* Sensor Points */}
//                   {sensors.map((sensor, index) => (
//                     <div
//                       key={sensor.id}
//                       className={`absolute w-4 h-4 rounded-full border-2 border-white animate-pulse cursor-pointer
//                         ${sensor.status === 'active' ? 'bg-green-400' :
//                           sensor.status === 'alert' ? 'bg-red-400' : 'bg-gray-400'}`}
//                       style={{
//                         left: `${20 + (index * 15)}%`,
//                         top: `${30 + (index * 10)}%`
//                       }}
//                       title={sensor.name}
//                     />
//                   ))}

//                   {/* Threat Indicators */}
//                   {threats.filter(t => t.status === 'active').map((threat, index) => (
//                     <div
//                       key={threat.id}
//                       className="absolute animate-ping cursor-pointer"
//                       style={{
//                         left: `${25 + (index * 20)}%`,
//                         top: `${40 + (index * 15)}%`
//                       }}
//                       onClick={() => setSelectedThreat(threat)}
//                     >
//                       <AlertTriangle className={`w-6 h-6 ${
//                         threat.severity === 'critical' ? 'text-red-500' :
//                         threat.severity === 'high' ? 'text-orange-500' :
//                         'text-yellow-500'
//                       }`} />
//                     </div>
//                   ))}
//                 </div>

//                 {/* Map Labels */}
//                 <div className="absolute top-4 left-4 text-xs text-slate-300">
//                   <div>Benue State</div>
//                   <div>Border Monitoring System</div>
//                 </div>
//               </div>
//             </div>
//           </div>

//           {/* Video Feeds */}
//           <div className="bg-slate-800 rounded-lg p-4">
//             <h2 className="text-lg font-semibold mb-4 flex items-center space-x-2">
//               <Camera className="w-5 h-5" />
//               <span>Live Video Feeds</span>
//             </h2>
//             <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
//               {sensors.slice(0, 6).map((sensor) => (
//                 <div key={sensor.id} className="bg-slate-700 rounded-lg p-3">
//                   <div className="bg-black rounded aspect-video mb-2 flex items-center justify-center">
//                     <div className="text-slate-400 text-center">
//                       <Camera className="w-8 h-8 mx-auto mb-2" />
//                       <div className="text-xs">Camera {sensor.id}</div>
//                       <div className="text-xs">{sensor.name}</div>
//                     </div>
//                   </div>
//                   <div className="flex justify-between items-center text-xs">
//                     <span className={getStatusColor(sensor.status)}>{sensor.status}</span>
//                     <span className="text-slate-400">Battery: {sensor.batteryLevel}%</span>
//                   </div>
//                 </div>
//               ))}
//             </div>
//           </div>
//         </div>

//         {/* Sidebar - Threat List */}
//         <div className="w-80 bg-slate-800 border-l border-slate-700 p-4 overflow-y-auto">
//           <h2 className="text-lg font-semibold mb-4 flex items-center space-x-2">
//             <AlertTriangle className="w-5 h-5" />
//             <span>Active Threats</span>
//           </h2>

//           <div className="space-y-3">
//             {threats.map((threat) => (
//               <div
//                 key={threat.id}
//                 className={`bg-slate-700 rounded-lg p-3 cursor-pointer transition-colors
//                   ${selectedThreat?.id === threat.id ? 'ring-2 ring-blue-400' : ''}
//                   hover:bg-slate-600`}
//                 onClick={() => setSelectedThreat(threat)}
//               >
//                 <div className="flex items-center justify-between mb-2">
//                   <span className={`px-2 py-1 rounded text-xs font-medium ${getSeverityColor(threat.severity)}`}>
//                     {threat.severity.toUpperCase()}
//                   </span>
//                   <div className="flex items-center space-x-1 text-xs text-slate-400">
//                     <Clock className="w-3 h-3" />
//                     <span>{new Date(threat.timestamp).toLocaleTimeString()}</span>
//                   </div>
//                 </div>

//                 <h3 className="font-medium mb-1">{threat.type.replace('_', ' ').toUpperCase()}</h3>
//                 <p className="text-sm text-slate-300 mb-2">{threat.description}</p>

//                 <div className="flex items-center justify-between text-xs text-slate-400">
//                   <span className="flex items-center space-x-1">
//                     <MapPin className="w-3 h-3" />
//                     <span>{threat.location.name}</span>
//                   </span>
//                   <span className="flex items-center space-x-1">
//                     <Users className="w-3 h-3" />
//                     <span>{threat.personnel}</span>
//                   </span>
//                 </div>

//                 <div className="mt-2 flex space-x-2">
//                   <button className="px-2 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-500">
//                     Deploy
//                   </button>
//                   <button className="px-2 py-1 bg-gray-600 text-white text-xs rounded hover:bg-gray-500">
//                     Investigate
//                   </button>
//                 </div>
//               </div>
//             ))}
//           </div>

//           {/* Sensor Status */}
//           <div className="mt-6">
//             <h3 className="text-md font-semibold mb-3 flex items-center space-x-2">
//               <Zap className="w-4 h-4" />
//               <span>Sensor Status</span>
//             </h3>

//             <div className="space-y-2">
//               {sensors.map((sensor) => (
//                 <div key={sensor.id} className="bg-slate-700 rounded p-2">
//                   <div className="flex items-center justify-between mb-1">
//                     <span className="text-sm font-medium">{sensor.name}</span>
//                     <span className={`text-xs ${getStatusColor(sensor.status)}`}>
//                       {sensor.status}
//                     </span>
//                   </div>
//                   <div className="flex items-center justify-between text-xs text-slate-400">
//                     <span>ID: {sensor.id}</span>
//                     <span>Battery: {sensor.batteryLevel.toFixed(1)}%</span>
//                   </div>
//                   <div className="w-full bg-slate-600 rounded-full h-1 mt-1">
//                     <div
//                       className="bg-green-400 h-1 rounded-full"
//                       style={{ width: `${sensor.batteryLevel}%` }}
//                     />
//                   </div>
//                 </div>
//               ))}
//             </div>
//           </div>
//         </div>
//       </div>

//       {/* Threat Detail Modal */}
//       {selectedThreat && (
//         <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
//           <div className="bg-slate-800 rounded-lg p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
//             <div className="flex items-center justify-between mb-4">
//               <h2 className="text-xl font-bold">Threat Details</h2>
//               <button
//                 onClick={() => setSelectedThreat(null)}
//                 className="text-slate-400 hover:text-white"
//               >
//                 ×
//               </button>
//             </div>

//             <div className="space-y-4">
//               <div className="grid grid-cols-2 gap-4">
//                 <div>
//                   <label className="text-sm text-slate-400">Threat ID</label>
//                   <p className="font-medium">{selectedThreat.id}</p>
//                 </div>
//                 <div>
//                   <label className="text-sm text-slate-400">Severity</label>
//                   <span className={`inline-block px-2 py-1 rounded text-sm font-medium ${getSeverityColor(selectedThreat.severity)}`}>
//                     {selectedThreat.severity.toUpperCase()}
//                   </span>
//                 </div>
//               </div>

//               <div>
//                 <label className="text-sm text-slate-400">Description</label>
//                 <p className="text-slate-200">{selectedThreat.description}</p>
//               </div>

//               <div className="grid grid-cols-2 gap-4">
//                 <div>
//                   <label className="text-sm text-slate-400">Location</label>
//                   <p className="font-medium">{selectedThreat.location.name}</p>
//                 </div>
//                 <div>
//                   <label className="text-sm text-slate-400">Personnel Deployed</label>
//                   <p className="font-medium">{selectedThreat.personnel}</p>
//                 </div>
//               </div>

//               <div>
//                 <label className="text-sm text-slate-400">Timestamp</label>
//                 <p className="font-medium">{selectedThreat.timestamp.toLocaleString()}</p>
//               </div>

//               <div className="flex space-x-3 mt-6">
//                 <button className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-500">
//                   Deploy Emergency Response
//                 </button>
//                 <button className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-500">
//                   Request Backup
//                 </button>
//                 <button className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-500">
//                   Mark Investigating
//                 </button>
//               </div>
//             </div>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default CommandCenter;
